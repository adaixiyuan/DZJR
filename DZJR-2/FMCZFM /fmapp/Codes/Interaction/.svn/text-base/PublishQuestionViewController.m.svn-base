//
//  PublishQuestionViewController.m
//  fmapp
//
//  Created by 李 喻辉 on 14-5-17.
//  Copyright (c) 2014年 yk. All rights reserved.
//

#import "PublishQuestionViewController.h"
#import "FMSettings.h"
#import "CurrentUserInformation.h"
#import "LoginController.h"
#import "AtPersonViewController.h"
#import "SETextView.h"
#import "HTTPClient+Interaction.h"
#import "QuestionInfo.h"
#import "ExpressView.h"
#import "SelectLocationViewController.h"
#import "JSBadgeView.h"
#import "FMImageView.h"
#include <libkern/OSAtomic.h>
#import "CurrentUserInformation.h"
#import "CustomCameraViewController.h"
#import "FontAwesome.h"
#import "UserPutoutDataParameterController.h"


#define kExpressionButtonTag            1001        //切换至表情按钮
#define kKeyBoardButtonTag              1002        //切换至键盘按钮
#define kImageButtonTag                 1003        //图片按钮
#define kPictureButtonTag               1004        //相册按钮
#define kCameraButtonTag                1005        //拍照按钮
#define kAtButtonTag                    1006        //@按钮
#define kLeftItemButtonTag              1007        //取消
#define kRightItemButtonTag             1008        //发布
#define kExpressionScrollViewTag        1009        //表情scrollview
#define kAddressButtonTag               1010        //地址
#define kImageDataTag                   1011
#define KAddStyleButtonTag              1012        //车友可见状态


#define kPublishCommandBarHeight        40.5        //按钮工具条高度
#define KPublishAddressHeight           23          //地址区高度
#define KPublishExpressHeight           216         //表情键盘高度
#define KPublishImageGap                5           //图片间的缝隙
#define KPublishContentGap              5           //文本框边距


@interface PublishQuestionViewController ()<UITextViewDelegate,UIImagePickerControllerDelegate,
                                            UINavigationControllerDelegate,
                                            AtPersonDelegate,ExpressViewDelegate,SelectLocationDelegate,UITableViewDataSource,UITableViewDelegate,CustomCameraViewControllerDelegate,UserParameterInforDelegate>

@property (nonatomic,weak)UITextView        *contentView;               //文字内容视图
@property (nonatomic,weak)ExpressView       *expressionView;            //表情视图
@property (nonatomic,strong) NSMutableDictionary   *personInfoDictionary;      //@用户的信息字典
@property (nonatomic,weak)UIView            *buttonBar;                 //命令条
@property (nonatomic,weak)UILabel           *contentHint;               //文字输入框提示
@property (nonatomic,assign)BOOL            isPublic;                   //是否公开
@property (strong)NSMutableArray            *publishImageCache;         //图片上传缓存FMImage
@property (nonatomic,weak)UIButton          *expressButton;             //表情键盘按钮
@property (nonatomic,weak)UIView            *photoView;                 //图片显示区
@property (nonatomic,strong)NSMutableArray  *imageList;                 //图片显示列表
@property (nonatomic,assign)Boolean         imageMode;                  //是否在图像编辑模式
@property (nonatomic,weak)UIButton          *addressButton;             //地址按钮
@property (nonatomic,weak)UILabel           *wordsLable;                //字数
@property (nonatomic,weak)JSBadgeView       *imageBadge;                //图片个数显示
@property (nonatomic,copy)NSString          *strAddress;                //发布位置
@property (nonatomic,assign)NSInteger        strAddstyle;                //发布范围
@property (nonatomic,strong)NSMutableArray *photoArray;                 //多选的图片
///截屏获取的图片内容
//@property (nonatomic,strong)UIImage         *userScreenShotImage;
///名字列表内容
@property (nonatomic,weak)UITableView       *nameTableView;
///名字承载的数据数组
@property (nonatomic,strong)NSMutableArray  *userNameMutableArray;
@property (nonatomic , weak)AFHTTPRequestOperation    *requestDataOperation;
@property (nonatomic,copy)NSString          *IntroductionStr;
@property (nonatomic,assign)BOOL            IntroductionTest;

/** 根据用户编辑的内容，获取用户名字内容
 
 *@para keyName 编辑的用户名关键字
 **/
- (void)initWithGetUserNameForEditNameKeyWord:(NSString *)keyName;
@end



@implementation PublishQuestionViewController
{
     CustomCameraViewController *_customCameraVC;
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        self.enableCustomNavbarBackButton = FALSE;
        self.isPublic = YES;
        self.imageMode = NO;
        self.IntroductionTest=NO;
    }
    return self;
}
- (id) initWithInviteCarFirendsWithString:(NSString *)friendStr
{
    self = [super init];
    if (self) {
        self.enableCustomNavbarBackButton = FALSE;
        self.isPublic = YES;
        self.imageMode = NO;
        self.IntroductionTest=YES;
        self.IntroductionStr=[NSString stringWithFormat:@"#圈子#我的圈子名称为“%@”，欢迎志同道合的车友加入，一起聊聊天，谈谈心。",friendStr];
    }
    return self;
}


- (id)initWithPulishQuestionScreenShotImage:(UIImage *)screenShotImage{
    self = [super init];
    if (self) {
        // Custom initialization
        self.enableCustomNavbarBackButton = FALSE;
        self.isPublic = YES;
        self.imageMode = NO;
        self.IntroductionTest=NO;

        
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        [button setTag:kImageButtonTag];
        [self buttonClicked:button];
        [self addImage:screenShotImage];
//        [self layoutContent:KPublishExpressHeight];
        //显示图片栏
        CGRect rc = self.view.bounds;
        [self layoutContent:KPublishExpressHeight];
        //显示图片栏
        self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight, rc.size.width, KPublishExpressHeight);
        [self.contentView becomeFirstResponder];
        [self.contentView setText:@" "];
    }
    return self;
}

- (id) initWithPersonDictionary :(NSDictionary *) _personDictionary
{
    self = [super init];
    if (self) {
        self.enableCustomNavbarBackButton = FALSE;
        self.IntroductionTest=NO;
        if (_personDictionary) {
            self.personInfoDictionary = [[NSMutableDictionary alloc] initWithDictionary:_personDictionary];
            
            Log(@"self.personInfoDictionary is %@",self.personInfoDictionary);
            if([self.personInfoDictionary.allKeys containsObject:@"role"]){
                self.isPublic = YES;
            }else{
                self.isPublic = NO;
            }
        }
    }
    return self;
}

- (void) loadView
{
    self.view = [[UIView alloc] initWithFrame:HUIApplicationFrame()];
    self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    self.view.backgroundColor = [FMThemeManager.skin backgroundColor];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.

    //设置标题
    [self settingNavTitle:@"新建"];

    //设置内容视图
    [self settingContentView];
    
    //添加键盘通知
    [self addKeyboardNotification];
    
    //设置左右侧Item
    [self settingNavigationBarItem];
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
    
}

- (void) viewDidAppear:(BOOL)animated
{
    if (!self.imageMode) {
        [self.contentView becomeFirstResponder];
    }
    
}


- (void)clearNameListTableViewData{
    if (self.userNameMutableArray == nil) {
        self.userNameMutableArray = [NSMutableArray array];
    }
    [self.userNameMutableArray removeAllObjects];
    [self.nameTableView reloadData];
    [self.nameTableView setHidden:YES];
}

-(void)textChanged:(NSNotification *)notification{
    
    ///若仅含有@字符则返回
    if ([self.contentView.text isEqualToString:@"@"]) {
        
        [self clearNameListTableViewData];
        return;
    }
    
    //若为空，则返回
    if (IsStringEmptyOrNull(self.contentView.text)) {
        [self clearNameListTableViewData];
        return;
    }
    
    NSString *keyWordName = @"";
    ///若头部不含有@则返回
    if (![self.contentView.text hasPrefix:@"@"]) {
        [self clearNameListTableViewData];
        return;
    }else {
        
        
        
        ///第一种发送方式
        /*
        NSString *userEditContent = [NSString stringWithFormat:@"%@",[self.contentView.text substringFromIndex:1]];
        
        NSRange contentRange = [userEditContent rangeOfString:@" "];//获取首个空格的位置
        Log(@"location is %d \n length is %d",contentRange.location,contentRange.length)
        
        if (contentRange.length == 0) {
            return;
        }
        NSString *contenString = [userEditContent substringToIndex:contentRange.location +
                                  contentRange.length];//开始截取
        keyWordName = contenString;
         
         */
        
        NSString *contentString = [self.contentView.text substringFromIndex:1];
        
        ///若用户输入的字符大于5个字符则返回
        if ([contentString length] > 5) {
            [self clearNameListTableViewData];
            return;
        }
        keyWordName = contentString;
    }

    if (IsStringEmptyOrNull(keyWordName)) {
        return;
    }
    Log(@"搜索关键关键字是:%@",keyWordName);
    [self initWithGetUserNameForEditNameKeyWord:keyWordName];
}
#pragma mark -设置内容视图
- (void) settingContentView
{
    
    if (self.publishImageCache) {
        [self.publishImageCache removeAllObjects];
    }else{
        self.publishImageCache = [[NSMutableArray alloc] init];
    }
    CGRect rc = self.view.bounds;
    
    //表情视图
    CGRect rcExpress = CGRectMake(0, rc.size.height , rc.size.width, KPublishExpressHeight);    //默认隐藏到底部
    ExpressView* expressionView = [[ExpressView alloc] initWithFrame:rcExpress];
    expressionView.delegate = self;
    [self.view addSubview:expressionView];
    self.expressionView = expressionView;
    //图片视图区
    UIView* photoView = [[UIView alloc] initWithFrame:rcExpress];
    UIButton *cameraButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [cameraButton setBackgroundImage:createImageWithColor(KDefaultOrNightBackGroundColor) forState:UIControlStateNormal];
    [cameraButton setBackgroundImage:createImageWithColor(KDefaultOrNightButtonHighlightColor) forState:UIControlStateHighlighted];

    cameraButton.tag = kCameraButtonTag;
    [cameraButton setFrame:CGRectMake((KProjectScreenWidth-300)/2, 10, 80, 30)];
    cameraButton.titleLabel.font = kFontWithSmallSize;
    [cameraButton grayStyle];
    [cameraButton setTitle:@"拍照" forState:UIControlStateNormal];
    [cameraButton addAwesomeIcon:FMIconCamera beforeTitle:YES];
    [cameraButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [cameraButton.layer setBorderColor:[KDefaultOrNightSepratorColor CGColor]];
    [photoView addSubview:cameraButton];
    
    UIButton *pictureButton = [UIButton buttonWithType:UIButtonTypeCustom];
    pictureButton.tag = kPictureButtonTag;
    [pictureButton setBackgroundImage:createImageWithColor(KDefaultOrNightBackGroundColor) forState:UIControlStateNormal];
    [pictureButton setBackgroundImage:createImageWithColor(KDefaultOrNightButtonHighlightColor) forState:UIControlStateHighlighted];
    [pictureButton setFrame:CGRectMake(cameraButton.frame.origin.x+90, 10, 80, 30)];
    pictureButton.titleLabel.font = kFontWithSmallSize;
    [pictureButton grayStyle];
    [pictureButton setTitle:@"相册" forState:UIControlStateNormal];
    [pictureButton addAwesomeIcon:FMIconCamera beforeTitle:YES];
    [pictureButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [pictureButton.layer setBorderColor:[KDefaultOrNightSepratorColor CGColor]];
    [photoView addSubview:pictureButton];
    self.photoView = photoView;

    [self.view addSubview:photoView];
    self.photoView = photoView;
    
    //=====================================================================================================
    //命令工具条视图
    
    CGFloat kWidthScale=KProjectScreenWidth/320;
//    CGFloat width=80*kWidthScale;
    CGFloat width=80;

    
    CGFloat leftWidth=(KProjectScreenWidth-320)/5;
    
    CGRect rcButtonBar = CGRectMake(0,
                                    rc.size.height - kPublishCommandBarHeight - KPublishExpressHeight,
                                    rc.size.width,
                                    kPublishCommandBarHeight);
    UIView *bgView = [[UIView alloc] initWithFrame:rcButtonBar];
    bgView.backgroundColor = KDefaultOrNightBackGroundColor;
    bgView.layer.borderWidth = 0.5f;
    bgView.layer.borderColor = [KDefaultOrNightSepratorColor CGColor];
    bgView.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleTopMargin;
    
    
    
    //键盘或是表情按钮
    UIButton *expressionOrKeyboardButton = [UIButton buttonWithType:UIButtonTypeCustom];
    expressionOrKeyboardButton.tag = kExpressionButtonTag;
//    [expressionOrKeyboardButton setImage:[UIImage imageNamed:@"Interaction_Publish_Expression.png"] forState:UIControlStateNormal];
    
    [expressionOrKeyboardButton setImage:[FontAwesome imageWithIcon:FMIconExpression iconColor:KContentTextLightGrayColor iconSize:20] forState:UIControlStateNormal];

    [expressionOrKeyboardButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [expressionOrKeyboardButton setFrame:CGRectMake(leftWidth, 0, width, 40)];
    self.expressButton = expressionOrKeyboardButton;
    [bgView addSubview:expressionOrKeyboardButton];
    
    //@按钮
    UIButton *atButton = [UIButton buttonWithType:UIButtonTypeCustom];
    atButton.tag = kAtButtonTag;
//    [atButton setImage:[UIImage imageNamed:@"Interaction_Publish_At.png"] forState:UIControlStateNormal];
    [atButton setTitle:@"@" forState:UIControlStateNormal];
    [atButton setTitleColor:KContentTextLightGrayColor forState:UIControlStateNormal];
    atButton.titleLabel.font=[UIFont systemFontOfSize:25];
    [atButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [atButton setFrame:CGRectMake(leftWidth*2+width, 0, width, 40)];
    [bgView addSubview:atButton];
    
    //照片按钮
    UIButton *imageButton = [UIButton buttonWithType:UIButtonTypeCustom];
    imageButton.tag = kImageButtonTag;
//    [imageButton setImage:[UIImage imageNamed:@"Interaction_Publish_Camera.png"] forState:UIControlStateNormal];
    [imageButton setImage:[FontAwesome imageWithIcon:FMIconCamera iconColor:KSubNumbeiTextColor iconSize:20] forState:UIControlStateNormal];
    [imageButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [imageButton setFrame:CGRectMake(width*2+leftWidth*3, 0, width, 40)];
    JSBadgeView *badgeView = [[JSBadgeView alloc] initWithParentView:imageButton alignment:JSBadgeViewAlignmentTopRight];
    if (ThemeCategory==5) {
        badgeView.alpha=0.7;
    }
    badgeView.badgePositionAdjustment = CGPointMake(-25, 10);
    self.imageBadge.badgeTextFont = kFontWithSmallestSize;
    self.imageBadge = badgeView;
    [bgView addSubview:imageButton];

    //地址按钮
    UIButton *locationButton = [UIButton buttonWithType:UIButtonTypeCustom];
    locationButton.tag = kAddressButtonTag;
    
//    [locationButton setImage:[UIImage imageNamed:@"Interaction_Publish_Picture.png"] forState:UIControlStateNormal];
    
    [locationButton setImage:[FontAwesome imageWithIcon:FMIconCenter iconColor:KContentTextLightGrayColor iconSize:24] forState:UIControlStateNormal];

    
    [locationButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [locationButton setFrame:CGRectMake(width*3+leftWidth*4, 0, width, 40)];
    [bgView addSubview:locationButton];
    
    
    [self.view addSubview:bgView];
    self.buttonBar = bgView;

    //=====================================================================================================
    //地址按钮
    CGRect rcAddress = CGRectMake(10, rcButtonBar.origin.y - KPublishImageGap - KPublishAddressHeight, 200, KPublishAddressHeight);
    UIButton *addressButton = [UIButton buttonWithType:UIButtonTypeCustom];
    addressButton.tag = kAddressButtonTag;
    [addressButton setFrame:rcAddress];
    [addressButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    addressButton.titleLabel.font = kFontWithSmallSize;
    [addressButton grayStyle];
    addressButton.layer.borderColor=[KSubTitleContentTextColor CGColor];
    addressButton.layer.borderWidth = 0.5f;
    [addressButton addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    
    self.strAddress = @"";
    self.addressButton = addressButton;
    [self updateAddress:@"选择地点"];
    addressButton.hidden = YES;
    [self.view addSubview:addressButton];
    
    //添加发布问题的文本框
    CGRect rcContent = CGRectMake(0,
                                  0,
                                  rc.size.width,
                                  rcAddress.origin.y - KPublishImageGap);

    UITextView *textView = [[UITextView alloc] init];
    if ([textView respondsToSelector:@selector(textContainerInset)]){
        textView.textContainerInset = UIEdgeInsetsMake(10, 4, 0, 0);
    }else{
        [textView setValue:@"10" forKey:@"m_marginTop"];
    }
    textView.delegate = self;
    textView.font = [UIFont systemFontOfSize:16.0f];

    if (self.personInfoDictionary != nil) {
        textView.text = [NSString stringWithFormat:@"@%@ ",[self.personInfoDictionary objectForKey:@"name"]];
    }
    else{
        [textView setText:[NSString stringWithFormat:@"%@",FMShareSetting.userPersonalSendEditedContentString]];
    }
    
    if (self.IntroductionTest) {
        textView.text=self.IntroductionStr;
    }
    textView.editable = YES;
    textView.backgroundColor = [FMThemeManager.skin backgroundColor];
    textView.textColor = [FMThemeManager.skin textColor];
    textView.frame = rcContent;
    textView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    
    [textView becomeFirstResponder];
    
    
    ///头部标签内容
    UILabel     *headerLabel = [[UILabel alloc]init];
    [headerLabel setFrame:CGRectMake(10.0f, 10.0f, 300.0f, 20.0f)];
    [headerLabel setBackgroundColor:[UIColor clearColor]];
    [headerLabel setFont:[UIFont systemFontOfSize:16.0f]];
    headerLabel.textColor = [FMThemeManager.skin textColor];
    [headerLabel setText:@"分享路上新鲜事..."];
    [textView addSubview:headerLabel];
    self.contentHint = headerLabel;
    //监测输入文本变化
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(textChanged:)
                                                 name:UITextViewTextDidChangeNotification object:nil];
    self.contentView = textView;
    [self.view addSubview:textView];
    
    //选中文本框
    [self textViewDidChange:textView];
    
    
    //TableView
    UITableView* tbView = [[UITableView alloc] initWithFrame:CGRectMake(0,
                                                                        50,
                                                                        rc.size.width,
                                                                        rc.size.height - 270)
                                                       style:UITableViewStylePlain];
    tbView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    tbView.backgroundColor = [UIColor whiteColor];
    tbView.dataSource = self;
    tbView.delegate = self;
    tbView.hidden = YES;
    self.nameTableView = tbView;
    [self.view addSubview:tbView];

    
}
#pragma mark -更新地址
-(void)updateAddress:(NSString* )strAddress
{
    [self.addressButton setTitle:strAddress forState:UIControlStateNormal];
    [self.addressButton addAwesomeIcon:FMIconCenter beforeTitle:YES];
    CGSize size = [self.addressButton sizeThatFits:CGSizeMake(KPublishAddressHeight, 200)];
    CGRect rc = self.addressButton.frame;
    [self.addressButton setFrame:CGRectMake(rc.origin.x,
                                            rc.origin.y,
                                            size.width +10,
                                            KPublishAddressHeight)];
    
    if ([strAddress isEqualToString:@"选择地点"]) {
        self.strAddress =  @"";
        return;
    }
    self.strAddress = strAddress;
}

#pragma mark -调整布局
- (void)layoutContent:(GLfloat) bottomMargin
{
    CGRect rc = self.view.bounds;
    //设置文本框frame
    CGRect rcButtonBar = CGRectMake(0,
                                    rc.size.height - bottomMargin - kPublishCommandBarHeight,
                                    rc.size.width,
                                    kPublishCommandBarHeight);
    [self.buttonBar setFrame:rcButtonBar];
    //
    CGRect rcAddress = CGRectMake(10,
                                rcButtonBar.origin.y - KPublishImageGap - KPublishAddressHeight,
                                self.addressButton.bounds.size.width,
                                KPublishAddressHeight);
    
    [self.addressButton setFrame:rcAddress];
    CGRect rcText = CGRectMake(self.contentView.frame.origin.x,
                               self.contentView.frame.origin.y,
                               self.contentView.bounds.size.width,
                               rcAddress.origin.y - KPublishImageGap);
    [self.contentView setFrame:rcText];
}

-(void)RecoveryKeyboardView
{
    [self.view endEditing:YES];

    UIView *keyboardView = GetKeyBoardView();
    
    CGRect keyboardFrame = keyboardView.frame;
    keyboardFrame.origin.y = [UIScreen mainScreen].bounds.size.height - keyboardView.frame.size.height;
    keyboardView.frame = keyboardFrame;
    


}
#pragma mark -按钮点击时

- (void) buttonClicked:(id) sender
{
    
    UIButton *button = (UIButton *)sender;
    CGRect rc = self.view.bounds;
    if (button.tag == kExpressionButtonTag || button.tag == kKeyBoardButtonTag) {//表情 或 键盘
        
        if (self.imageMode) {
            [self.contentView becomeFirstResponder];
        }
        //获取键盘视图
        UIView *keyboardView = GetKeyBoardView();
        
        CGFloat keyboardHeight = 0;//键盘高度
        NSString* buttonImageName;
        if(button.tag == kExpressionButtonTag){//显示表情
            [UIView beginAnimations:@"HiddenKeyboard" context:nil];
            [UIView setAnimationDuration:0.3f];
            //隐藏键盘
            CGRect keyboardFrame = keyboardView.frame;
            keyboardFrame.origin.y = [UIScreen mainScreen].bounds.size.height;
            keyboardView.frame = keyboardFrame;
            //隐藏图片栏
            self.photoView.frame = CGRectMake(0,rc.size.height , rc.size.width, KPublishExpressHeight);
            //显示表情
            self.expressionView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight, rc.size.width, KPublishExpressHeight);
            [UIView commitAnimations];
            
            keyboardHeight = KPublishExpressHeight;
            button.tag = kKeyBoardButtonTag;
//            buttonImageName = @"Interaction_Publish_Keyboard.png";
        [button setImage:[FontAwesome imageWithIcon:FMIconKeyboard iconColor:KContentTextLightGrayColor iconSize:22] forState:UIControlStateNormal];
        }else{//显示键盘
            [UIView beginAnimations:@"ShowKeyboard" context:nil];
            [UIView setAnimationDuration:0.3f];
            //显示键盘
            CGRect keyboardFrame = keyboardView.frame;
            keyboardFrame.origin.y = [UIScreen mainScreen].bounds.size.height - keyboardView.frame.size.height;
            keyboardView.frame = keyboardFrame;
            //隐藏表情
            self.expressionView.frame = CGRectMake(0, rc.size.height, 320, KPublishExpressHeight);
            
            //隐藏图片栏
            self.photoView.frame = CGRectMake(0,rc.size.height, rc.size.width, KPublishExpressHeight);
            
            [UIView commitAnimations];
            
            keyboardHeight = keyboardFrame.size.height;
            
            if (HUISystemVersionAboveOrIs(kHUISystemVersion_8_0)) {
                keyboardHeight = keyboardHeight > 400? 252: keyboardHeight;
            }
            button.tag = kExpressionButtonTag;
//            buttonImageName = @"Interaction_Publish_Expression.png";
            [button setImage:[FontAwesome imageWithIcon:FMIconExpression iconColor:KContentTextLightGrayColor iconSize:20] forState:UIControlStateNormal];

        }
        
//        [button setImage:[UIImage imageNamed:buttonImageName] forState:UIControlStateNormal];
        
        [UIView beginAnimations:@"Animation" context:nil];
        [UIView setAnimationDuration:0.3f];
        [self layoutContent:keyboardHeight];
        [UIView commitAnimations];
        
        //        ///若图片个数大于6张，则移动位置
        //        if (self.imageList.count >= 6) {
        //            [self layoutContent:KPublishExpressHeight+70];
        //            //显示图片栏
        //            self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight-70.0f, rc.size.width, KPublishExpressHeight);
        //        }else{
        //            self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight, rc.size.width, KPublishExpressHeight);
        //        }
        //
    }
    
    else if(button.tag == kAtButtonTag){//@
        
        AtPersonViewController *viewController = [[AtPersonViewController alloc] init];
        viewController.delegate = self;
        FMNavigationController *navController = [[FMNavigationController alloc] initWithRootViewController:viewController];
        [self presentModalViewController:navController animated:YES];
        
    }
    
    else if(button.tag == kImageButtonTag){
        
//        if (self.imageList.count >= 9) {
//            ShowImportErrorAlertView(@"本次会话最多可上传9张图片");
//            return;
//        }
        
        self.imageMode = YES;
        [self.contentView resignFirstResponder];
        
        [UIView beginAnimations:@"ShowPhotoView" context:nil];
        [UIView setAnimationDuration:0.3f];
        
        //显示图片栏
        //隐藏表情
        self.expressionView.frame = CGRectMake(0,rc.size.height, rc.size.width, KPublishExpressHeight);
        [UIView commitAnimations];
        [UIView beginAnimations:@"Animation" context:nil];
        [UIView setAnimationDuration:0.3f];
        [self layoutContent:KPublishExpressHeight];
        [UIView commitAnimations];
        
        
        ///若图片个数大于6张，则移动位置
        if (self.imageList.count >= 6) {
            [self layoutContent:KPublishExpressHeight+70];
            //显示图片栏
            self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight-70.0f, rc.size.width, KPublishExpressHeight+70);
        }else{
            self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight, rc.size.width, KPublishExpressHeight);
        }
    }
    else if(button.tag == kAddressButtonTag){
        SelectLocationViewController* viewController = [[SelectLocationViewController alloc] init];
        viewController.delegate = self;
        [self.navigationController pushViewController:viewController animated:TRUE];
    }
    else if(button.tag == KAddStyleButtonTag){
        
        NSMutableArray*activityTitleArray = [[NSMutableArray alloc]initWithObjects:
                                             @"全部车友",@"仅圈子内车友", nil];
        UserPutoutDataParameterController *paramViewControl = [[UserPutoutDataParameterController alloc]
                                                               initWithWithParameterInfor:@"全部车友"
                                                               withParamArray:activityTitleArray
                                                               withDelegate:self
                                                               withParamStyleTyle:ParameterForTransmissionStyle
                                                               withTitle:@"可见范围"];
        [self.navigationController pushViewController:paramViewControl animated:YES];
   
        
    }
    else{//照片
        ///若图片个数大于6张，则移动位置
          
        if (self.imageList.count >= 6) {
            [self layoutContent:KPublishExpressHeight+70];
            //显示图片栏
            self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight-70.0f, rc.size.width, KPublishExpressHeight+70);
        }else{
            [self layoutContent:KPublishExpressHeight];
            //显示图片栏
            self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight, rc.size.width, KPublishExpressHeight);
        }
        
        if (self.imageList.count >= 9) {
            ShowImportErrorAlertView(@"本次会话最多可上传9张图片");
            return;
        }
        
        UIImagePickerController *imagePickerController = [[UIImagePickerController alloc] init];
        imagePickerController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
        imagePickerController.delegate = self;
        
        if(button.tag == kCameraButtonTag){//相机
            
            
          /*  if(![UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]){
                return;
            }
            imagePickerController.sourceType = UIImagePickerControllerSourceTypeCamera;
            imagePickerController.allowsEditing = NO;*/
            NSInteger photoNumbers=9-self.imageList.count;
            _customCameraVC = [[CustomCameraViewController alloc] initWithDelegate:self];
            _customCameraVC.photoNumbers=photoNumbers;
            [self presentViewController:_customCameraVC animated:YES completion:nil];

            
        }else if(button.tag == kPictureButtonTag){//相册
            //            if(![UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary]){
            //                return;
            //            }
            //            imagePickerController.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
            //            imagePickerController.allowsEditing = NO;
            //        }
            //
            //
            //版本6.0以下
            NSInteger photoNumbers=9-self.imageList.count;
            ZYQAssetPickerController *picker;
            if(HUISystemVersionBelowOrIs(kHUISystemVersion_6_0))
            {
                ZYQAssetGroupViewController *groupViewController = [[ZYQAssetGroupViewController alloc] init];
                picker = [[ZYQAssetPickerController  alloc] initWithRootViewController:groupViewController];
            }
            else
            {
            picker = [[ZYQAssetPickerController  alloc] init];
        
            }
            picker.maximumNumberOfSelection = photoNumbers;
            picker.assetsFilter = [ALAssetsFilter allPhotos];
            picker.showEmptyGroups=NO;
            picker.delegate=self;
            
            picker.selectionFilter = [NSPredicate predicateWithBlock:^BOOL(id evaluatedObject, NSDictionary *bindings) {
                if ([[(ALAsset*)evaluatedObject valueForProperty:ALAssetPropertyType] isEqual:ALAssetTypeVideo]) {
                    NSTimeInterval duration = [[(ALAsset*)evaluatedObject valueForProperty:ALAssetPropertyDuration] doubleValue];
                    return duration >= 5;
                } else {
                    return YES;
                }
            }];
            
            [self presentViewController:picker animated:YES completion:NULL];
        }
        //[self presentModalViewController:imagePickerController animated:YES];
    }
}
//获取相机多选图片
- (void)sendImageList:(NSArray *)array andCount:(NSInteger)count
{
    
    // 若图片个数大于6张，则移动位置
    if (self.imageList.count >= 6) {
        CGRect rc = self.view.bounds;
        [self layoutContent:KPublishExpressHeight+70];
        //显示图片栏
        self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight-70.0f, rc.size.width, KPublishExpressHeight);
    }
    
    for (int i=0; i<count; i++) {
        
        if (self.imageList.count >= 9) {
            ShowImportErrorAlertView(@"本次会话最多可上传9张图片");
            return;
        }
        
        UIImage *imageinfo = [array objectAtIndex:i];
        CGSize imageSize = imageinfo.size;
        if (imageSize.width < 1) {
            return;
        }
        //图片宽度限制在640，高度依比例缩放
        CGFloat imageHeight = imageSize.height * 640 /imageSize.width;
        imageSize.width = 640;
        imageSize.height = imageHeight;
        
        UIGraphicsBeginImageContext(imageSize);
        [imageinfo drawInRect: CGRectMake(0, 0, imageSize.width,imageSize.height)];
        UIImage *smallImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        
        [self addImage:smallImage];
        
    }
}
//获取相册多选图片
-(void)assetPickerController:(ZYQAssetPickerController *)picker didFinishPickingAssets:(NSArray *)assets
{
    
    
    //[self.imageList removeAllObjects];
    self.photoArray=[[NSMutableArray alloc]init];
    for (int i=0; i<assets.count; i++) {
        ALAsset *asset=assets[i];
        UIImage *tempImg=[UIImage imageWithCGImage:asset.defaultRepresentation.fullScreenImage];
        [self.photoArray addObject:tempImg];
        
    }
    
    for(UIImage *photoimage in self.photoArray)
    {
        if (self.imageList.count >= 9) {
            ShowImportErrorAlertView(@"本次会话最多可上传9张图片");
            return;
        }
        [self addImage:photoimage];
    }
    
}

#pragma mark -设置导航栏左右按钮

- (void)settingNavigationBarItem
{
    self.navButtonSize=18;
    //取消
    [self setLeftNavButtonFA:FMIconCancelCross
                 withFrame:kNavButtonRect
              actionTarget:self
                    action:@selector(navigationBarCancelItemClicked:)];
    
    self.navButtonSize=KNavSize;

    [self setRightNavButtonFA:FMIconSubmitSend
                   withFrame:kNavButtonRect
                actionTarget:self
                      action:@selector(navigationBarDoneItemClicked:)];
}
#pragma mark -导航栏Item点击时
- (void) navigationBarCancelItemClicked:(id) sender
{
    
    if (!IsStringEmptyOrNull(self.contentView.text)) {
        ///若头部@存在
        if ([self.contentView.text hasPrefix:@"@"]) {
            NSRange contentRange = [self.contentView.text rangeOfString:@" "];//获取首个空格的位置
            NSString *contenString = [self.contentView.text substringFromIndex:contentRange.location +
                           contentRange.length];//开始截取
            [FMShareSetting setUserPersonalSendEditedContentString:contenString];
        }
        else {
            [FMShareSetting setUserPersonalSendEditedContentString:self.contentView.text];
        }
        
    }else{
        [FMShareSetting setUserPersonalSendEditedContentString:@""];
    }
    
    [self RecoveryKeyboardView];
    [self dismissModalViewControllerAnimated:YES];
}
- (void) navigationBarDoneItemClicked:(id) sender
{
    if ([[CurrentUserInformation sharedCurrentUserInfo] userLoginState] == 0) {//未登录
        
        //登陆控制器
        LoginController *loginController = [[LoginController alloc] init];
        FMNavigationController *navController = [[FMNavigationController alloc] initWithRootViewController:loginController];
        [self presentModalViewController:navController animated:YES];
    }else{//用户已经登录
        [self.contentView resignFirstResponder];
        [self publishQuestion];//发布问题
    }
}
//当文字改变时
- (void)textViewDidChange:(UITextView *)textView
{
    
    NSString *content = textView.text;
    if ([content length] == 0) {
        self.contentHint.textColor = [UIColor grayColor];
        self.navigationItem.rightBarButtonItem.enabled = NO;
    }else {
        self.contentHint.textColor = [UIColor clearColor];
        self.navigationItem.rightBarButtonItem.enabled = YES;
    }

}
#pragma mark -增加图片
- (void) addImage:(UIImage* )imageData
{
    if (self.imageList == nil) {
        self.imageList = [[NSMutableArray alloc] init];
    }
    if (self.imageList.count >= 9) {
        ShowImportErrorAlertView(@"本次会话最多可上传9张图片");
        return;
    }

    CGRect fc = self.view.bounds;
    
    if (self.imageList.count >= 6) {
        [self layoutContent:KPublishExpressHeight+70];
        //显示图片栏
        self.photoView.frame = CGRectMake(0,fc.size.height - KPublishExpressHeight-70.0f, fc.size.width, KPublishExpressHeight+70);
    }else{
        [self layoutContent:KPublishExpressHeight];
        //显示图片栏
        self.photoView.frame = CGRectMake(0,fc.size.height - KPublishExpressHeight, fc.size.width, KPublishExpressHeight);
    }
    CGRect rc = CGRectMake(0,0,50,50);
    UIView* imageElement = [[UIView alloc] initWithFrame:rc];
    if (ThemeCategory==5) {
        imageElement.alpha=0.6;
    }
    UIImageView* imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 8, rc.size.width - 8, rc.size.height - 8)];
    imageView.tag = kImageDataTag;
    imageView.image = imageData;
    imageView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [imageElement addSubview:imageView];
    
    UIImageView* removeView = [[UIImageView alloc] initWithFrame:CGRectMake(rc.size.width -15, 0, 15, 15)];
    removeView.image = [UIImage imageNamed:@"remove.png"];
    removeView.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleBottomMargin;
    removeView.userInteractionEnabled=YES;
    UITapGestureRecognizer *removemageViewTapGestureRecognizer =
    [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(removeImage:)];
    [removeView addGestureRecognizer:removemageViewTapGestureRecognizer];
        [imageElement addSubview:removeView];
    [self.photoView addSubview:imageElement];
    [self.imageList addObject:imageElement];
    if ([self.imageList count] > 0) {
        self.imageBadge.badgeText = [NSString stringWithFormat:@"%d", [self.imageList count]];
    }else{
        self.imageBadge.badgeText = nil;
    }
        [self adjustImagePositon:[self.imageList count] - 1];
}
#pragma mark -删除图片
- (void) removeImage:(UITapGestureRecognizer *) tapGestureRecognizer{
   
    UIView* imageView = [tapGestureRecognizer.view superview];
    NSInteger pos = [self.imageList indexOfObject:imageView];
    if (pos == NSNotFound) {
        
        return;
    }
    [self.imageList removeObject:imageView];
    [imageView removeFromSuperview];
    if ([self.imageList count] > 0) {
        self.imageBadge.badgeText = [NSString stringWithFormat:@"%d", [self.imageList count]];
    }else{
        self.imageBadge.badgeText = nil;
    }
    [self adjustImagePositon:pos];
}
#pragma mark -调整图片位置
- (void) adjustImagePositon:(NSInteger)index
{
    
    CGRect fc = self.view.bounds;
    CGRect rc;
    if (self.imageList.count >= 6) {
         rc = CGRectMake(0,fc.size.height - KPublishExpressHeight-70.0f, fc.size.width, KPublishExpressHeight);
    }else{
         rc= CGRectMake(0,fc.size.height - KPublishExpressHeight, fc.size.width, KPublishExpressHeight);
    }
    NSInteger cols = 3;                     //定义每行只能显示3个图片
    NSInteger rows = 2;                     //定义最多2行
    CGFloat gap = 20.0;                     //定义图片间隔
    CGFloat buttonHeight = 40;
    //CGRect rc = self.photoView.bounds;
    CGFloat picSize = (rc.size.height - buttonHeight - (rows + 1) * gap)/rows; //图片大小
    //CGFloat picSize = (rc.size.height - buttonHeight - rows * gap)/(rows-1); //图片大小

    CGFloat hgap = (rc.size.width - picSize * cols - gap * (cols - 1))/2.0;    //水平左右偏移
    CGFloat orgx = hgap;
    CGFloat orgy = gap + buttonHeight;
    int i = 0;
    
    [UIView beginAnimations:@"MoveImage" context:nil];
    [UIView setAnimationDuration:0.3f];
    for (UIImageView* imageView in self.imageList) {
        if (i >= index) {
            imageView.frame = CGRectMake(orgx, orgy, picSize, picSize);
        }        
        i++;
        if (i % cols == 0) {
            orgx = hgap;
            orgy += gap + picSize;
        }else{
            orgx += gap + picSize;
        }
    }
    [UIView commitAnimations];
}

#pragma mark -发布问题
- (void) publishQuestion
{
    if (!self.personInfoDictionary) {
        NSString* contentText = self.contentView.text;
        if (contentText.length < 10) {
            NSString *msg = @"";
            if(IsStringEmptyOrNull(contentText)){
                msg = @"发布内容不能为空";
            }else{
                msg = @"新建帖子不得少于10个字哦";
            }
            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"提示"
                                                                message:msg
                                                               delegate:self
                                                      cancelButtonTitle:@"确定"
                                                      otherButtonTitles:nil];
            [alertView show];
            return;
        }
    }else{

    }
        
    WaittingMBProgressHUD(HUIKeyWindow,@"正在发布...");
    __weak __typeof(&*self)weakSelf = self;
    __block volatile int32_t ncount = 0;    //请求完成个数
    //首先上传图片
    if ([self.imageList count] > 0) {
        for (UIView* imageElement in self.imageList) {
            UIImageView* imageView = (UIImageView* )[imageElement viewWithTag:kImageDataTag];
            UIImage* imageData = imageView.image;
            [FMImageClient imageUpload:imageData
                             imageType:@"1"
                            completion:^(WebAPIResponse* response){
                                
                                dispatch_async(dispatch_get_main_queue(), ^(void){
                                    
                                    Log(@"response.responseObject is %@",response.responseObject)
                                    if (response.code == WebAPIResponseCodeSuccess) {
                                        NSDictionary* dic = [response.responseObject objectForKey:kDataKeyData];
                                        NSString* strKey = [dic objectForKey:@"pic_url"];
                                        FMImage* im = [[FMImage alloc] init];
                                        im.url = strKey;
                                        im.imageSize = CGSizeMake([[dic objectForKey:@"pic_width"] floatValue],
                                                                                [[dic objectForKey:@"pic_height"] floatValue]);
                                        [self.publishImageCache addObject:im];
                                        //所有图片上传完毕,开始发布问题
                                        if(OSAtomicIncrement32(&ncount) >= [weakSelf.imageList count])
                                        {
                                            dispatch_async(dispatch_get_main_queue(), ^(void){
                                                [weakSelf publishQuestionAfterImage];
                                            });
                                        }
                                    }else{
                                        
                                        Log(@"image is here ")
                                        FailedMBProgressHUD(HUIKeyWindow,@"发布失败");
                                    }
                                });
                            }];
        }
    }else{
        [self publishQuestionAfterImage];
    }
}
- (void) publishQuestionAfterImage
{
    
    NSString* contentText = self.contentView.text;
    //NSDictionary *paramsDic = nil;//参数
    BOOL isAtPerson = NO;//是否@过
//    NSString *publicState =  self.isPublic ? @"1" : @"2";// 1为公开 2为私有 公开状态
    
    if (self.personInfoDictionary) {//有@字典
        NSString *atPersonName = [NSString stringWithFormat:@"@%@",[self.personInfoDictionary objectForKey:@"name"]];
        
        if([contentText hasPrefix:atPersonName]){//用户没有修改@
            isAtPerson = YES;
        }else{//修改@
            isAtPerson = NO;
        }
    }else{//没有@
        isAtPerson = NO;
    }
    
    QuestionInfo* questionInfo = [[QuestionInfo alloc] init];
    [questionInfo setIs_public:self.isPublic];
    [questionInfo setAddStyle:self.strAddstyle];
    questionInfo.publishUserInfo.userID = [[CurrentUserInformation sharedCurrentUserInfo] userID];
    questionInfo.publishUserInfo.userCityName = [[CurrentUserInformation sharedCurrentUserInfo] userCityCode];
    if (isAtPerson) {
        NSString *atPersonName = [NSString stringWithFormat:@"@%@",[self.personInfoDictionary objectForKey:@"name"]];//@用户的名称
        NSString *textContent = [[contentText substringFromIndex:atPersonName.length] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];//文本框内容
        
        questionInfo.questionContent = textContent;
        questionInfo.commentedUserInfo.userID = [NSString stringWithFormat:@"%@",[self.personInfoDictionary objectForKey:@"id"]];
        NSString *role = [self.personInfoDictionary objectForKey:@"role"];
        questionInfo.commentedUserInfo.userRole = role;

    }else{
        questionInfo.questionContent = contentText;
        questionInfo.commentedUserInfo.userRole = @"0";
        questionInfo.commentedUserInfo.userID = @"0";
    }
    if (FMShareSetting.agreePublicLocation) {

        if ( IsStringEmptyOrNull(self.strAddress)) {
            questionInfo.publishUserInfo.userStreet = [NSString stringWithFormat:@"%@",
                                                       [[NSUserDefaults standardUserDefaults] valueForKey:@"FMUserLocationInfo"]];
            
        }else{
            
            if (![self.strAddress isEqualToString:@"选择地点"]) {
                 questionInfo.publishUserInfo.userStreet = [NSString stringWithFormat:@"%@",self.strAddress];
            }
        }
    }
    if ([self.publishImageCache count] > 0) {
        questionInfo.images = [NSArray arrayWithArray:self.publishImageCache];
    }
    
    //发布请求
    __weak __typeof(&*self)weakSelf = self;
    [FMHTTPClient pulishNewQuesiton:questionInfo
                    completion:^(WebAPIResponse* response){
                        
                        dispatch_async(dispatch_get_main_queue(), ^(void){
                            if (response.code == WebAPIResponseCodeSuccess) {
                                SuccessMBProgressHUD(HUIKeyWindow,@"发布成功");
                                [[NSNotificationCenter defaultCenter] postNotificationName:FMPublishNewQuestionNotification
                                                                                    object:nil];
                                [FMShareSetting setUserPersonalSendEditedContentString:@""];
                                [weakSelf.navigationController popViewControllerAnimated:YES];
//                                [weakSelf.view endEditing:YES];
                                [self RecoveryKeyboardView];
                                [weakSelf dismissModalViewControllerAnimated:YES];
                                [weakSelf.navigationController dismissModalViewControllerAnimated:YES];
                                [[NSNotificationCenter defaultCenter] postNotificationName:@"UserGOBackScreenShotView"
                                                                                    object:nil];
                                
                            }
                            else if (response.code == WebAPIResponseCodeFailed) {
                                FailedMBProgressHUD(HUIKeyWindow,@"发布失败");
                                
                                Log(@"error is %@",ObjForKeyInUnserializedJSONDic(response.responseObject, @"msg"));
                                ShowImportErrorAlertView(StringForKeyInUnserializedJSONDic(response.responseObject, @"msg"));
                            }
                            else{
                                FailedMBProgressHUD(HUIKeyWindow,@"发布失败");
                            }
                        });
                    }];
}

#pragma mark -添加键盘出现或消失时的通知
- (void) addKeyboardNotification{
    //添加键盘出现通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAppear:) name:UIKeyboardWillShowNotification object:nil];
}

#pragma mark -移除键盘通知
- (void) removeKeyboardNotification
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];
}


#pragma mark -键盘出现时的通知
- (void) keyboardWillAppear:(NSNotification*)notification
{
    self.imageMode = NO;
    
    CGRect rc = self.view.bounds;
    
    //隐藏表情
    self.expressionView.frame = CGRectMake(0, rc.size.height, 320, KPublishExpressHeight);
    
    //隐藏图片栏
    self.photoView.frame = CGRectMake(0,rc.size.height, rc.size.width, KPublishExpressHeight);
    
    //复原表情按钮
    self.expressButton.tag = kExpressionButtonTag;
    [self.expressButton setImage:[UIImage imageNamed:@"Interaction_Publish_Expression.png"]
                        forState:UIControlStateNormal];
    
    //获得键盘信息
    CGRect endRect = [[notification.userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue];//键盘所在矩形区域
    [self layoutContent:endRect.size.height];
}
#pragma mark -UIImagePickerControllerDelegate

/*-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
// ///若图片个数大于6张，则移动位置
//    if (self.imageList.count >= 6) {
//        CGRect rc = self.view.bounds;
//        [self layoutContent:KPublishExpressHeight+70];
//        //显示图片栏
//        self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight-70.0f, rc.size.width, KPublishExpressHeight);
//    }
    
    ///若图片个数大于6张，则移动位置
    CGRect rc = self.view.bounds;
    if (self.imageList.count >= 6) {
        [self layoutContent:KPublishExpressHeight+70];
        //显示图片栏
        self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight-70.0f, rc.size.width, KPublishExpressHeight+70);
    }else{
        self.photoView.frame = CGRectMake(0,rc.size.height - KPublishExpressHeight, rc.size.width, KPublishExpressHeight);
    }
    
    UIImage *imageinfo = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
    //UIImageWriteToSavedPhotosAlbum(imageinfo, nil, nil, nil);//将照片保存到相册
    CGSize imageSize = imageinfo.size;
    if (imageSize.width < 1) {
        return;
    }
    //图片宽度限制在640，高度依比例缩放
    CGFloat imageHeight = imageSize.height * 640 /imageSize.width;
    imageSize.width = 640;
    imageSize.height = imageHeight;
    
    UIGraphicsBeginImageContext(imageSize);
    [imageinfo drawInRect: CGRectMake(0, 0, imageSize.width,imageSize.height)];
    UIImage *smallImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    [self addImage:smallImage];
    //self.selectedImageData = smallImage;//[[NSData alloc] initWithData:UIImageJPEGRepresentation(smallImage,0.6)];
    
    //设置相机按钮图片
    //[self.photoShowButton setImage:smallImage forState:UIControlStateNormal];
    
    [picker dismissModalViewControllerAnimated:YES];

}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {
    [picker dismissModalViewControllerAnimated:YES];
}*/


#pragma mark -AtPersonDelegate
- (void) selectedPerson:(NSDictionary *)personInfoDic
{
    self.isPublic = YES;
    
    NSString *atPersonName = nil;
    if (self.personInfoDictionary) {
        atPersonName = [NSString stringWithFormat:@"@%@",[self.personInfoDictionary objectForKey:@"name"]];
    }
    self.personInfoDictionary = [[NSMutableDictionary alloc] initWithDictionary:personInfoDic];
    NSString* strContent = self.contentView.text;
    
    if (!IsStringEmptyOrNull(atPersonName)) {//原先@过
        if( [strContent hasPrefix:atPersonName]){//用户没有修改@
            NSString *contentStr = [[strContent substringFromIndex:atPersonName.length] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            self.contentView.text = [NSString stringWithFormat:@"@%@ %@",[self.personInfoDictionary objectForKey:@"name"],contentStr];
        }else{//修改@
            self.contentView.text = [NSString stringWithFormat:@"@%@ %@",[self.personInfoDictionary objectForKey:@"name"],strContent];
        }
    }else{//没有@
        self.contentView.text = [NSString stringWithFormat:@"@%@ %@",[self.personInfoDictionary objectForKey:@"name"],strContent];
    }
    [self textViewDidChange:self.contentView];
}
#pragma mark -ExpressView
- (void)didExpressViewSelected:(NSInteger)tag isDelete:(BOOL)bDelete
{
    if (!bDelete) {//不是删除按钮

        NSString *contentText = [[NSString alloc] initWithFormat:@"%@[%@]",self.contentView.text,
                                 [[FMSettings sharedSettings].expressionNameArray objectAtIndex:tag - 1]];
        self.contentView.text = contentText;

    }else{//是删除按钮
        NSString* strText = self.contentView.text;
        if (strText.length > 0) {
            if ([[strText substringFromIndex:strText.length - 1] isEqualToString:@"]"]) {
                //正则表达式
                NSRegularExpression *textRegex = [NSRegularExpression regularExpressionWithPattern:@"\\[\\w*\\]" options:NSRegularExpressionCaseInsensitive error:nil];
                ////符合正则表达式的结果
                NSArray *textArrayOfAllMatches = [textRegex matchesInString:strText options:0 range:NSMakeRange(0, [strText length])];
                
                if (textArrayOfAllMatches.count > 0) {
                    NSTextCheckingResult *checkingResult = textArrayOfAllMatches.lastObject;
                    self.contentView.text = [strText substringWithRange:NSMakeRange(0,checkingResult.range.location)];
                }
            }else{
                self.contentView.text = [strText substringWithRange:NSMakeRange(0, strText.length - 1)];
            }
        }
    }
    [self textViewDidChange:self.contentView];
}
#pragma mark -SelectLocationDelegate
- (void)didLocationSelected:(NSString* )placeName coord:(CLLocationCoordinate2D)latlon
{
    self.addressButton.hidden = NO;
    
    if ([placeName isEqualToString:@""]) {
        [self.addressButton setHidden:YES];
    }
    [self updateAddress:placeName];
}


- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [self.contentView resignFirstResponder];
    [self.nameTableView setHidden:YES];
    return  YES;
}


#pragma mark - 根据用户编辑的内容，获取用户名字内容
- (void)initWithGetUserNameForEditNameKeyWord:(NSString *)keyName{
    [self.requestDataOperation cancel];
    if (self.userNameMutableArray == nil) {
        self.userNameMutableArray = [NSMutableArray array];
        [self.nameTableView reloadData];
    }
    else {
        [self.userNameMutableArray removeAllObjects];
        [self.nameTableView reloadData];
    }
    
    __weak __typeof(&*self)weakSelf = self;
    self.requestDataOperation = [FMHTTPClient getQusetionUserNameForKeyWord:keyName
                                                             withCompletion:^(WebAPIResponse *response)
                                 {
        dispatch_async(dispatch_get_main_queue(), ^(void){
            if(response.code == WebAPIResponseCodeSuccess){
                
                NSArray* dataList = [response.responseObject objectForKey:kDataKeyData];
                ///若数据存在，则解析内容，并显示；
                if (dataList.count >0) {
                    for (NSDictionary *userDic in dataList) {
                        [weakSelf.userNameMutableArray addObject:userDic];
                    }
                    [weakSelf.nameTableView setHidden:NO];
                    [weakSelf.nameTableView reloadData];
                    
                    Log(@"userNameArray is %@",weakSelf.userNameMutableArray);
                }
                ///若不存在内容，则隐藏视图。
                else{
                    [weakSelf.nameTableView setHidden:YES];
                }
            }
        });
    }];
}

#pragma mark - UITableViewDataSource

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [self.userNameMutableArray count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *tipCellIdentifier = @"tipCellIdentifier";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:tipCellIdentifier];
    
    if (cell == nil)
    {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault
                                      reuseIdentifier:tipCellIdentifier];
        cell.textLabel.font = kFontWithDefaultSize;
    }
    
    NSDictionary *userInforDictionary = (NSDictionary*)self.userNameMutableArray[indexPath.row];
    NSString *tip = [userInforDictionary objectForKey:@"userName"];
    
    cell.textLabel.text = tip;
    
    return cell;
}

#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
//    NSString *tip = self.userNameMutableArray[indexPath.row];
//    self..text = tip;
//    self.nameTableView.hidden = YES;
    
//    Log(@"userName infor %@");
    
//    self.personInfoDictionary = [[NSMutableDictionary alloc]initWithDictionary:(NSDictionary *)self.userNameMutableArray[indexPath.row]];
//    [self selectedPerson:self.personInfoDictionary];
    
//    self.personInfoDictionary = [[NSMutableDictionary alloc]init];
//    [self.personInfoDictionary setObject:@"" forKey:@"name"];
    

    NSMutableDictionary *userInforDictionary = [[NSMutableDictionary alloc]init];
    AddObjectForKeyIntoDictionary([(NSDictionary *)self.userNameMutableArray[indexPath.row] objectForKey:@"userName"], @"name", userInforDictionary);
    AddObjectForKeyIntoDictionary([(NSDictionary *)self.userNameMutableArray[indexPath.row] objectForKey:@"userId"], @"id", userInforDictionary);
    
    /*
    [self selectedPerson:userInforDictionary];
    */
    
    [self initWithUserOperationForWithOtherPeople:userInforDictionary];
    
//    [self.contentView setText:@""];
    self.nameTableView.hidden = YES;
    
}


- (void)initWithUserOperationForWithOtherPeople:(NSMutableDictionary *)userInforDic{
    self.isPublic = YES;
    
    NSString *atPersonName = nil;
    if (self.personInfoDictionary) {
        atPersonName = [NSString stringWithFormat:@"@%@",[self.personInfoDictionary objectForKey:@"name"]];
    }
    self.personInfoDictionary = [[NSMutableDictionary alloc] initWithDictionary:userInforDic];
//    NSString* strContent = self.contentView.text;
    if (!IsStringEmptyOrNull(atPersonName)) {//原先@过
//        if( [strContent hasPrefix:atPersonName]){//用户没有修改@
////            NSString *contentStr = [[strContent substringFromIndex:atPersonName.length] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
//            self.contentView.text = [NSString stringWithFormat:@"@%@ %@",[self.personInfoDictionary objectForKey:@"name"],@""];
//        }else{//修改@
            self.contentView.text = [NSString stringWithFormat:@"@%@ %@",[self.personInfoDictionary objectForKey:@"name"],@""];
//        }
    }else{//没有@
        self.contentView.text = [NSString stringWithFormat:@"@%@ %@",[self.personInfoDictionary objectForKey:@"name"],@""];
    }
    [self textViewDidChange:self.contentView];
}
-(void)userSearchFinishUsedCarParameterInfor:(NSString *)_paraInfor withParameterStyleType:(PutoutDataParameterStyleType)_paraStyleType
{
    if ([_paraInfor isEqualToString:@"仅圈子内车友"]) {
        self.strAddstyle=2;
    }
    else
    {
        self.strAddstyle=1;
    }
}

@end
