//
//  RoadViewController.m
//  fmapp
//
//  Created by 李 喻辉 on 14-5-11.
//  Copyright (c) 2014年 yk. All rights reserved.
//


#define KCodeWordsViewBGColor [UIColor colorWithRed:0.0f green:0.0f blue:0.0f alpha:0.5]

#import "RoadViewController.h"
#import "FMSettings.h"
#import "AppDelegate.h"
#import "FMMapInfoBar.h"
#import "RoadConditionInfo.h"
#import "CustomMAAnnotation.h"
#import "RadioPlayController.h"
#import "BDSSpeechSynthesizer.h"
#import "CurrentUserInformation.h"
#import "HTTPClient+RoadCondition.h"
#import "BDRecognizerViewController.h"
#import <AMapSearchKit/AMapSearchAPI.h>
#import "PublishQuestionViewController.h"
#import "AddRoadConditionViewController.h"
#import "RoadInformationListViewController.h"
#import "AddRoadConditionContentController.h"


#define kRoadConditionDetailHeight                  80

#define kMapViewTag                                 10001
#define kSearchViewTag                              10002
#define kSearchImageViewTag                         10003
#define kSearchAcitityIndicatorViewTag              10004
#define kSearchTextFieldTag                         10005
#define kRoadConditionDetailListViewTag             10006
#define kRoadConditionLabelTag                      10007
#define kReporterLabelTag                           10008
#define kReportTimeLabelTag                         10009
#define kTagLabelTag                                10010
#define KSearchRoadConditionInfoAlertViewTag        10011
#define kDetailListIndicatorImageViewTag            10012

#define KButtonStartVoiceRoadTag                    10111
#define KButtonFinishVoiceRoadTag                   10112


@interface RoadViewController () <MKMapViewDelegate,UIGestureRecognizerDelegate,BDRecognizerViewDelegate,FMAudioManagerDelegate,CLLocationManagerDelegate,AMapSearchDelegate>
@property (nonatomic,weak)MKMapView                 *mapView;
@property NSMutableArray                            *roadConditionsArray;           //路况信息数组
@property NSMutableArray                            *roadConditionAnnotationsArray; //路况标注数组
@property (nonatomic,strong)CustomMKAnnotation      *longPressAnnotation;           //长按指示标注
@property (nonatomic, weak)  AFHTTPRequestOperation *requestDataOperation;          //请求列表数据的操作
@property (nonatomic, weak)  MKAnnotationView       *selectAnnotationView;          //当前击中的路况标签
@property (nonatomic, weak)  AFHTTPRequestOperation *requestOperationForAudio;
@property (nonatomic,strong) FMMapInfoBar           *mapInfoBar;                    //地图底部信息条
@property (nonatomic , strong)  NSMutableDictionary *roadConditionsDictionary;
@property (nonatomic,strong)BDRecognizerViewController* recognizerViewController;
@property (nonatomic , assign)CLLocationCoordinate2D    leftLocationCoordinate;
@property (nonatomic , assign)CLLocationCoordinate2D    rightLocationCoordinate;
@property (nonatomic , assign)  BOOL                isMapPolymerizationLimit;


@property NSMutableArray                            *roadConditionsForAudioArray;           //路况信息数组
@property NSMutableArray                            *roadConditionAnnotationsForAudioArray; //路况标注数组


////语音上报设置
@property (nonatomic , weak)  UIButton              *userAddRoadAudioButton;
@property (nonatomic , strong)  FMAudioManager      *userAudioManager;
///用户个人录制语音KEY值
@property (nonatomic , strong)  NSString            *userAudioURLKeyString;
///判断语音是否正在播放
@property (nonatomic , assign)  BOOL                isAudioPlaying;
////录音获取到的数据内容
@property (nonatomic , strong)  AMRInfo             *userRecordAMRInfor;
@property (nonatomic , weak)    UIButton            *recordAudioBGView;
@property (nonatomic , weak)    UIImageView         *userRecordAudioAnimationImageView;
@property (nonatomic , weak)    UIImageView         *userCancelAudioImageView;
@property (nonatomic , strong)  NSMutableDictionary *userAudioDictionary;
@property (nonatomic , weak)    UIButton            *userStartPlayRoadContentButton;
@property (nonatomic, retain) BDSSpeechSynthesizer *synthesizer;
///定位管理器
@property (nonatomic,strong) CLLocationManager      *mainLocationManager;
@property (nonatomic,strong) AMapSearchAPI          *mapSearch;

///最后一次选中的经纬度内容
@property (nonatomic , assign)CLLocationCoordinate2D    lastLocationCoordinate;
///语音字符串
@property (nonatomic , strong)  NSString            *audioARMStringForBDSpeechString;
///判断是否已经开始播放路况，若为YES，则表示正在播放路况，若为NO，则表示不再播放
@property (nonatomic , assign)  BOOL                isAlreadyStartPlayRoadContent;
///语音播放动画
@property (nonatomic , weak)    UIImageView         *audioRoadConditionAnimationImageView;
///判断是否由定位按键操作的
@property (nonatomic , assign) BOOL                 isLocationBool;



- (void)initWithLeftBarButtonItemOperationEvent;
- (void)initWithSetupAudioAddRoadFrame;
- (void)initWithUserStarRecordAudio;
- (void)initWithUserFinishRecordAudio;
- (void)initWithUserCancelRecordAudio;
- (void)initWithUserRemoveCancelRecordAudio;
- (void)initWithStartBDSpeekWithString:(NSString *)speekString;
- (void)initWithSetBDSpeekParamInformation;


/** 是否播放语音开关设置
 
 *@return void
 **/
- (void)initWithStartVoiceForRoadConditions:(id)sender;


- (void)initWithRoadConditionsInforForLeftCoordinate:(CLLocationCoordinate2D )leftCoor
                                 withRightCoordinate:(CLLocationCoordinate2D )rightCoor;
@end

@implementation RoadViewController
{
    CALayer *_backLayer;
}


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        self.enableCustomNavbarBackButton = FALSE;
    }
    return self;
}
-(void)viewWillAppear:(BOOL)animated
{

    [super viewWillAppear:NO];
}
- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.
    [self settingNavTitle:@"实时路况"];
    _backLayer= [CALayer layer];

    self.navButtonSize = KNavSize;
    //上报按钮
    [self setRightNavButtonFA:FMIconNewAdd
                  withFrame:kNavButtonRect
               actionTarget:self
                     action:@selector(publishRoadCondition)];
    
    [self setLeftNavButtonFA:FMIconLeftArrow
                   withFrame:kNavButtonRect
                actionTarget:self
                      action:@selector(initWithLeftBackViewController)];

    
    
#if defined (SJC)
  /*  ///左侧目录内容
    self.navButtonSize = 22.0;
    [self setLeftNavButtonFA:FAEye
                   withFrame:kNavButtonRect
                actionTarget:self
                      action:@selector(initWithLeftBarButtonItemOperationEvent)];
   */

    
    ///界面内容
    [self initWithSetupAudioAddRoadFrame];
#endif
     
    [self settingContentView];
    
    self.isAlreadyStartPlayRoadContent = NO;
    self.isLocationBool = NO;
    self.roadConditionsArray = [NSMutableArray array];
    self.roadConditionAnnotationsArray = [NSMutableArray array];
    self.roadConditionsForAudioArray = [NSMutableArray array];
    self.roadConditionAnnotationsForAudioArray = [NSMutableArray array];
    self.roadConditionsDictionary = [[NSMutableDictionary alloc]init];
    self.audioARMStringForBDSpeechString = [[NSString alloc]initWithFormat:@"%@",@""];
    
    [self addNotification];
    self.mapView.showsUserLocation = NO;
    //启动定位
//    [ShareAppDelegate startLocationUpdate];
    
    [self initStartLocationUpdate];
}

-(void)initStartLocationUpdate{
    if(self.mainLocationManager){
        [self.mainLocationManager setDelegate:nil];
    }
    self.mainLocationManager = [[CLLocationManager alloc]init];
    [self.mainLocationManager setDelegate:self];
    [self.mainLocationManager setDistanceFilter:70.0f];
    
    [self.mainLocationManager setDesiredAccuracy:kCLLocationAccuracyBest];
    [self.mainLocationManager startUpdatingLocation];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)initWithLeftBarButtonItemOperationEvent{
    RoadInformationListViewController *roadViewController = [[RoadInformationListViewController alloc]initWithRoadListInformation:self.roadConditionsArray];
    roadViewController.hidesBottomBarWhenPushed = YES;
    [self.navigationController setNavigationBarHidden:NO animated:NO];//显示导航栏
    [self.navigationController pushViewController:roadViewController animated:YES];
}

#pragma mark -
#pragma mark -MAReverseGeocoderDelegate
- (void)onReGeocodeSearchDone:(AMapReGeocodeSearchRequest *)request response:(AMapReGeocodeSearchResponse *)response
{
    //获取道路信息
    if (response.regeocode != nil) {
        
        NSString *roadName = nil;
        NSString* locName = nil;
        locName = response.regeocode.addressComponent.district;//区 如：历下区
        if (response.regeocode.roads.count > 0) {
            AMapRoad* revRoad = [response.regeocode.roads objectAtIndex:0];
            locName = [NSString stringWithFormat:@"%@%@",locName,revRoad.name];
            if (response.regeocode.roads.count > 1) {
                AMapRoad* revRoad2 = [response.regeocode.roads objectAtIndex:1];
                roadName = [NSString stringWithFormat:@"%@和%@交叉口",revRoad.name,revRoad2.name];
            }else{
                roadName = [NSString stringWithFormat:@"%@",revRoad.name];
            }
        }
        [[NSUserDefaults standardUserDefaults] setValue:locName forKey:@"FMUserLocationInfo"];
        [[NSUserDefaults standardUserDefaults] setValue:roadName forKey:@"FMUserRoadInfo"];
        
        [[NSNotificationCenter defaultCenter] postNotificationName:FMLocationSuccessNotification
                                                            object:nil];
        
    }else{
        [[NSUserDefaults standardUserDefaults] setValue:nil forKey:@"FMUserLocationInfo"];
    }
    
    
    ///控制逻辑
    if (self.isLocationBool == YES) {
        NSString* strRoadInfo = [[NSUserDefaults standardUserDefaults] valueForKey:@"FMUserRoadInfo"];
        if (!IsStringEmptyOrNull(strRoadInfo)) {
            dispatch_async(dispatch_get_main_queue(), ^(void){
                
                ShowAutoHideMBProgressHUD(HUIKeyWindow, strRoadInfo);
            });
        }
        
        self.isLocationBool = NO;
    }
    //移除地图上所有标注
    if(self.roadConditionAnnotationsArray){
        NSArray *annotationsArray = [NSArray arrayWithArray:self.mapView.annotations];
        [self.mapView removeAnnotations:annotationsArray];
        [self.roadConditionAnnotationsArray removeAllObjects];
        [self.roadConditionsArray removeAllObjects];
        [self.roadConditionsDictionary removeAllObjects];
        if (self.roadConditionsDictionary) {
            self.roadConditionsDictionary = nil;
            self.roadConditionsDictionary = [[NSMutableDictionary alloc]init];
        }
    }
}
-(void)initWithLeftBackViewController
{
    
    [self hideRoadConditionDetail];
    [self.navigationController popViewControllerAnimated:YES];

}
- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation{
    if (signbit(newLocation.horizontalAccuracy)) {
        return;
    }
    
    if (ABS([newLocation.timestamp timeIntervalSinceNow]) > 3600) {
        return;
    }
    
    [manager stopUpdatingLocation];//停止定位
    
    //加偏操作
    CLLocationCoordinate2D currentUserCoordinate2D = WGS84toGCJ(newLocation.coordinate);
    [[CurrentUserInformation sharedCurrentUserInfo] setUserCoordinate:currentUserCoordinate2D];//设置当前用户经纬度
    
    
    //设置地图级别和位置
    MKMapView *mainMapView = self.mapView;
    MKCoordinateSpan theSpan;
    theSpan.latitudeDelta = 0.03;
    theSpan.longitudeDelta = 0.03;
    MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(currentUserCoordinate2D, theSpan);
    [mainMapView setRegion:coordinateRegion animated:YES];
    
    //逆地理编码
    AMapReGeocodeSearchRequest *regeo = [[AMapReGeocodeSearchRequest alloc] init];
    
    regeo.location = [AMapGeoPoint locationWithLatitude:currentUserCoordinate2D.latitude
                                              longitude:currentUserCoordinate2D.longitude];
    regeo.requireExtension = YES;

    if (!self.mapSearch) {
        self.mapSearch = [[AMapSearchAPI alloc]initWithSearchKey:kMapKey Delegate:self];
        [self.mapSearch setDelegate:self];
    }
    [self.mapSearch AMapReGoecodeSearch:regeo];
    Log(@"定位成功了")
}

- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error{
    [manager stopUpdatingLocation];
    
    Log(@"定位失败")
}

#pragma mark -主题通知
- (void) themeChangedNotification:(NSNotification *)notification
{
    [self updateNaviTheme];
}

- (void)cancleAudioAddRoadSetup{
    [self.recordAudioBGView setHidden:YES];
}
///设置
- (void)initWithSetupAudioAddRoadFrame{
    
    ////////////
    CGRect rc = self.view.frame;
    
    UIButton *backGrondView = [[UIButton alloc]init];
    [backGrondView setBackgroundColor:KCodeWordsViewBGColor];
    [backGrondView setFrame:self.navigationController.view.bounds];
    self.recordAudioBGView = backGrondView;
    [self.navigationController.view addSubview:self.recordAudioBGView];
    [self.recordAudioBGView setHidden:YES];
    [self.recordAudioBGView addTarget:self
                               action:@selector(cancleAudioAddRoadSetup)
                     forControlEvents:UIControlEventTouchUpInside];
    
    UIImageView *imageView = [[UIImageView alloc]init];
    [imageView setFrame:CGRectMake((rc.size.width - 54.0f)/2, (rc.size.height - 100.0f)/2.0f, 54.0f, 70.0f)];
    [imageView setBackgroundColor:[UIColor clearColor]];
    [imageView setImage:[UIImage imageNamed:@"RoadCondition_CancalRecordAudio.png"]];
    self.userCancelAudioImageView = imageView;
    [self.userCancelAudioImageView setHidden:YES];
    [self.recordAudioBGView  addSubview:self.userCancelAudioImageView];
    
    
    UIImageView *recordAudioImageView = [[UIImageView alloc]init];
    recordAudioImageView.image = [UIImage imageNamed:@"UserVoice_Animation01.png"];
    recordAudioImageView.frame = CGRectMake((self.view.frame.size.width-137.6)/2,(rc.size.height - 100.0f)/2.0f, 137.6, 66);
    recordAudioImageView.animationImages = [NSArray arrayWithObjects:
                                            [UIImage imageNamed:@"UserVoice_Animation02.png"],
                                            [UIImage imageNamed:@"UserVoice_Animation03.png"],
                                            [UIImage imageNamed:@"UserVoice_Animation04.png"],
                                            nil];
    recordAudioImageView.animationDuration = 1.0;
    self.userRecordAudioAnimationImageView = recordAudioImageView;
    [self.userRecordAudioAnimationImageView setHidden:NO];
    [self.recordAudioBGView addSubview:self.userRecordAudioAnimationImageView];
    
    UILabel *displayContent = [[UILabel alloc]initWithFrame: CGRectMake(10.0f,((rc.size.height - 100.0f)/2.0f+70.0f), rc.size.width - 20.0f, 20)];
    [displayContent setText:@"上滑到此，取消发送"];
    [displayContent setTextAlignment:NSTextAlignmentCenter];
    [displayContent setFont:[UIFont systemFontOfSize:13.0f]];
    [displayContent setBackgroundColor:[UIColor clearColor]];
    [displayContent setTextColor:KTableViewCellBackGroundColor];
    [self.recordAudioBGView addSubview:displayContent];
    
    
    //录音按钮
    UIButton *recordButton = [UIButton buttonWithType:UIButtonTypeCustom];
    recordButton.frame = CGRectMake((rc.size.width - 50)/2, rc.size.height - 100, 50,50);
    [recordButton setBackgroundImage:[UIImage imageNamed:@"RoadConditionFinishRecordAudio.png"]
                            forState:UIControlStateNormal];
    [recordButton setBackgroundImage:[UIImage imageNamed:@"RoadConditionBeginRecordAudio.png"]
                            forState:UIControlStateHighlighted];
    ///开始录音
    [recordButton addTarget:self action:@selector(initWithUserStarRecordAudio)
           forControlEvents:UIControlEventTouchDown];
    ///录音结束
    [recordButton addTarget:self action:@selector(initWithUserFinishRecordAudio)
           forControlEvents:UIControlEventTouchUpInside];
    ///手指移除录音控件
    [recordButton addTarget:self action:@selector(initWithUserCancelRecordAudio)
           forControlEvents:UIControlEventTouchDragOutside];
    ///用户抬起手指
    [recordButton addTarget:self action:@selector(initWithUserRemoveCancelRecordAudio)
           forControlEvents:UIControlEventTouchUpOutside];
    
    self.userAddRoadAudioButton = recordButton;
    [self.recordAudioBGView addSubview:self.userAddRoadAudioButton];
}
#pragma mark -设置内容视图
- (void) settingContentView
{
    self.isMapPolymerizationLimit = NO;
    
    ///播放器设置
    self.userAudioManager = [[FMAudioManager alloc]init];
    [self.userAudioManager setDelegate:self];
    self.userAudioDictionary = [[NSMutableDictionary alloc]init];
    
    CGRect rc = self.view.bounds;
    //地图
    MKMapView *mainMapView = [[MKMapView alloc] initWithFrame:rc];
    mainMapView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    mainMapView.delegate = self;
    mainMapView.showsUserLocation = NO;

    ////添加地图单击手势
    UITapGestureRecognizer *mapViewTapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(mapViewTapped:)];
    mapViewTapRecognizer.delegate = self;
    [mainMapView addGestureRecognizer:mapViewTapRecognizer];
    
    [self.view addSubview:mainMapView];
    self.mapView = mainMapView;
    
    
    
    ///语音上报设置
    UIButton *audioButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [audioButton setFrame:CGRectMake(rc.size.width - 48.0f,30, 38.0f, 38.0f)];
    [audioButton addTarget:self action:@selector(userAddRoadWithAudioMethod) forControlEvents:UIControlEventTouchUpInside];
    [audioButton setBackgroundImage:[UIImage imageNamed:@"AudioRoadCondition.png"] forState:UIControlStateNormal];
    [self.view addSubview:audioButton];



    /////语音上报设置

    UIButton *starVoiceButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [starVoiceButton setTag:KButtonStartVoiceRoadTag];
    [starVoiceButton setFrame:CGRectMake(rc.size.width - 48.0f,80, 38.0f, 38.0f)];
    [starVoiceButton addTarget:self action:@selector(initWithStartVoiceForRoadConditions:) forControlEvents:UIControlEventTouchUpInside];
    [starVoiceButton setBackgroundImage:[UIImage imageNamed:@"RoadAudioVoiceBackGroundImage.png"] forState:UIControlStateNormal];
    UIImageView *animationImageView = [[UIImageView alloc]init];
    [animationImageView setBackgroundColor:[UIColor clearColor]];
    animationImageView.image = [UIImage imageNamed:@"RoadFinishVoiceImage.png"];
    animationImageView.frame = CGRectMake(0.0f,0.0f, 38, 38);
    animationImageView.animationImages = [NSArray arrayWithObjects:
                                          [UIImage imageNamed:@"RoadConditionPlaying1.png"],
                                          [UIImage imageNamed:@"RoadConditionPlaying2.png"],
                                          [UIImage imageNamed:@"RoadConditionPlaying3.png"],
                                          nil];
    animationImageView.animationDuration = 1.0;
    self.audioRoadConditionAnimationImageView = animationImageView;
    [starVoiceButton addSubview:self.audioRoadConditionAnimationImageView];
    self.userStartPlayRoadContentButton = starVoiceButton;
    [self.view addSubview:self.userStartPlayRoadContentButton];
    
    /*
    //添加广播按钮
    UIButton *broadcastButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [broadcastButton setFrame:CGRectMake(10, rc.size.height - 190, 43, 43)];
    [broadcastButton setImage:[UIImage imageNamed:@"RoadCondition_Broadcast.png"] forState:UIControlStateNormal];
    [broadcastButton addTarget:self action:@selector(broadcastButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:broadcastButton];
     */
    
    //添加定位按钮
    UIButton *locationButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [locationButton setFrame:CGRectMake(10, rc.size.height - 150, 43, 43)];
    [locationButton setImage:[UIImage imageNamed:@"MapView_Location.png"] forState:UIControlStateNormal];
    [locationButton addTarget:self action:@selector(locationButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:locationButton];
}


#pragma mark -添加通知
- (void) addNotification
{
    //重新获取路况通知
    [[NSNotificationCenter defaultCenter] addObserver: self
                                             selector: @selector(roadConditionNotification:)
                                                 name: @"FMRoadConditionNotification"
                                               object: nil];
    //添加路况通知
    [[NSNotificationCenter defaultCenter] addObserver: self
                                             selector: @selector(addRoadConditionNotification:)
                                                 name: FMAddRoadConditionNotification
                                               object: nil];
    
    //删除路况通知
    [[NSNotificationCenter defaultCenter] addObserver: self
                                             selector: @selector(deleteRoadConditionNotification:)
                                                 name: @"FMDeleteRoadConditionNotification"
                                               object: nil];
    
    
    //定位通知
    [[NSNotificationCenter defaultCenter] addObserver: self
                                             selector: @selector(locationUpdateNotification:)
                                                 name: FMLocationSuccessNotification
                                               object: nil];
    
    //主题通知
    [[NSNotificationCenter defaultCenter] addObserver: self
                                             selector: @selector(themeChangedNotification:)
                                                 name: FMThemeChangedNotification
                                               object: nil];
}

#pragma mark -位置更新
- (void) locationUpdateNotification:(NSNotification *) notification
{
    
    CLLocationCoordinate2D currentUserCoordinate2D = [CurrentUserInformation sharedCurrentUserInfo].userCoordinate;

    Log(@"进啦定位了。。。。。\n\n")
    //获取路况信息
//    [self getRoadConditions:currentUserCoordinate2D];
    
    
    if (self.isLocationBool == YES) {
        NSString* strRoadInfo = [[NSUserDefaults standardUserDefaults] valueForKey:@"FMUserRoadInfo"];
        if (!IsStringEmptyOrNull(strRoadInfo)) {
            dispatch_async(dispatch_get_main_queue(), ^(void){
                
                ShowAutoHideMBProgressHUD(HUIKeyWindow, strRoadInfo);
            });
        }
        
        self.isLocationBool = NO;
    }
    
    
    //移除地图上所有标注
    if(self.roadConditionAnnotationsArray){
        NSArray *annotationsArray = [NSArray arrayWithArray:self.mapView.annotations];
        [self.mapView removeAnnotations:annotationsArray];
        [self.roadConditionAnnotationsArray removeAllObjects];
        [self.roadConditionsArray removeAllObjects];
        [self.roadConditionsDictionary removeAllObjects];
        if (self.roadConditionsDictionary) {
            self.roadConditionsDictionary = nil;
            self.roadConditionsDictionary = [[NSMutableDictionary alloc]init];
        }
    }
    
    //设置地图级别和位置
    MKMapView *mainMapView = self.mapView;
    MKCoordinateSpan theSpan;
    theSpan.latitudeDelta = 0.03;
    theSpan.longitudeDelta = 0.03;
    MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(currentUserCoordinate2D, theSpan);
    [mainMapView setRegion:coordinateRegion animated:YES];
     
     
    
}
#pragma mark -获取路况通知
- (void) roadConditionNotification:(NSNotification *) notification
{
//    [self locationButtonClicked:nil];//重新获取路况
    [self initStartLocationUpdate];
}

#pragma mark -添加路况通知
- (void) addRoadConditionNotification:(NSNotification *) notification
{
    
    RoadConditionInfo *roadConditionInfo = (RoadConditionInfo *)notification.object;
    
    //将标注添加到地图
    CustomMKAnnotation *customAnnotation = [[CustomMKAnnotation alloc] init];
    customAnnotation.coordinate = roadConditionInfo.roadConditionCoordinate;
    customAnnotation.tag = [roadConditionInfo.roadConditionID intValue];
    customAnnotation.type = roadConditionInfo.roadConditionType;
    customAnnotation.data = roadConditionInfo;
    [self.mapView addAnnotation:customAnnotation];
    
    
    [self.roadConditionAnnotationsArray addObject:customAnnotation];
    [self.roadConditionsArray insertObject:roadConditionInfo atIndex:0];//添加路况信息到路况信息数组
    
}
#pragma mark -删除路况通知
- (void) deleteRoadConditionNotification:(NSNotification *) notification
{
    RoadConditionInfo *roadConditionInfo = (RoadConditionInfo *) notification.object;
    NSInteger roadIndex = 0;
    BOOL hasRoadIndex = NO;
    if ([self.roadConditionsArray containsObject:roadConditionInfo]) {
        hasRoadIndex = YES;
        roadIndex = [self.roadConditionsArray indexOfObject:roadConditionInfo];
        [self.roadConditionsArray removeObject:roadConditionInfo];
    }
    if ([self.roadConditionsDictionary objectForKey:roadConditionInfo.roadConditionID]) {
        [self.roadConditionsDictionary removeObjectForKey:roadConditionInfo.roadConditionID];
    }
    
    if (hasRoadIndex == YES) {
        CustomMKAnnotation *customAnnotation = (CustomMKAnnotation *)[self.roadConditionAnnotationsArray objectAtIndex:roadIndex];
        [self.mapView removeAnnotation:customAnnotation];
        [self.roadConditionAnnotationsArray removeObject:customAnnotation];
    }
}

#pragma mark -定位按钮点击时
- (void) locationButtonClicked:(id) sender
{
    self.isLocationBool = YES;
    [self initStartLocationUpdate];
    
}
#pragma mark -添加路况按钮点击时
- (void) addButtonClicked:(id) sender
{
    //[AddRoadConditionView showAddRoadConditionViewInController:self.navigationController.tabBarController];
}
#pragma mark -广播按钮点击时
- (void) broadcastButtonClicked:(id) sender
{
    if ([KProjectCityCodeString isEqualToString:@"371300"]) {
        ShowImportErrorAlertView(@"该地区暂未开通本服务");
        return;
    }
    if ([KProjectCityCodeString isEqualToString:@"420100"]) {
        ShowImportErrorAlertView(@"该地区暂未开通本服务");
        return;
    }
    
    if ([KProjectCityCodeString isEqualToString:@"430100"]) {
        ShowImportErrorAlertView(@"该地区暂未开通本服务");
        return;
    }
    RadioPlayController *radioPlayController = [[RadioPlayController alloc]init];
    [self presentModalViewController:radioPlayController animated:YES];
}
- (void)userAddRoadWithAudioMethod{
#if defined (SJC)
    
    [self.userCancelAudioImageView setImage:[UIImage imageNamed:@"RoadCondition_CancalRecordAudio.png"]];
    [self.userRecordAudioAnimationImageView setImage:[UIImage imageNamed:@"UserVoice_Animation01.png"]];
    [self.userCancelAudioImageView setHidden:YES];
    [self.userRecordAudioAnimationImageView setHidden:NO];
    [self.recordAudioBGView setHidden:NO];
#else
    // 创建识别控件
    BDRecognizerViewController *tmpRecognizerViewController =
    [[BDRecognizerViewController alloc] initWithOrigin:CGPointMake((KProjectScreenWidth-302)/2, 128)
                                             withTheme:[BDTheme defaultTheme]];
    tmpRecognizerViewController.delegate = self;
    
    
    // 设置识别参数
    BDRecognizerViewParamsObject *paramsObject = [[BDRecognizerViewParamsObject alloc] init];
    
    // 开发者信息，必须修改API_KEY和SECRET_KEY为在百度开发者平台申请得到的值，否则示例不能工作
    paramsObject.apiKey = BAIDU_VOICE_API_KEY;
    paramsObject.secretKey = BAIDU_VOICE_SECRET_KEY;
    
    // 设置是否需要语义理解，只在搜索模式有效
    paramsObject.isNeedNLU = NO;
    
    // 设置识别语言
    paramsObject.language = BDVoiceRecognitionLanguageChinese;
    
    
    // 设置识别模式，分为搜索和输入
    paramsObject.recognitionProperty = EVoiceRecognitionPropertyInput;
    
    // 设置显示效果，是否开启连续上屏
    paramsObject.resultShowMode = BDRecognizerResultShowModeContinuousShow;

    
    // 设置提示音开关，是否打开，默认打开
    paramsObject.recordPlayTones = EBDRecognizerPlayTonesRecordPlay;

    paramsObject.disablePuncs = NO;
    //paramsObject.isShowTipsOnStart = NO;
    paramsObject.isShowTipAfter3sSilence = NO;
    paramsObject.isShowHelpButtonWhenSilence = NO;
    paramsObject.tipsTitle = @"可以使用如下方式报路况";
    paramsObject.tipsList = [NSArray arrayWithObjects:@"解放路与历山路路口拥堵", @"花园路由东向西行驶缓慢", @"顺河高架经四路上口畅通", nil];
    
    self.recognizerViewController = tmpRecognizerViewController;

    [self.recognizerViewController startWithParams:paramsObject];
#endif
}
#pragma mark - BDRecognizerViewDelegate

- (void)onEndWithViews:(BDRecognizerViewController *)aBDRecognizerView withResults:(NSArray *)aResults
{
    
    if ([aResults count] < 1) {
        return;
    }
    NSString* strInput = nil;
    for (NSArray *result in aResults)
    {
        NSDictionary *dic = [result objectAtIndex:0];
        strInput = [[dic allKeys] objectAtIndex:0];
        break;
    }
    
    
    /*
    AddRoadConditionViewController *viewController =
                [[AddRoadConditionViewController alloc] initWithAudioGenerateString:strInput];
    
    FMNavigationController *navigationView = [[FMNavigationController alloc]initWithRootViewController:viewController];
    [self presentModalViewController:navigationView animated:YES];
    
    */
    
    AddRoadConditionContentController *viewController = [[AddRoadConditionContentController alloc]initWithAudioGenerateString:strInput];
    FMNavigationController *navigationView = [[FMNavigationController alloc]initWithRootViewController:viewController];
    [self presentModalViewController:navigationView animated:YES];

    
 }
#pragma mark -路况详情视图点击时
- (void) roadConditionDetailListViewTapped:(UITapGestureRecognizer *) gestureRecognizer
{
    [self hideRoadConditionDetail];

}
- (void)getRoadConditions:(CLLocationCoordinate2D)coord
{
    __weak __typeof(&*self)weakSelf = self;
    //移除现有路况信息
    if ([self.roadConditionsArray count] > 0) {
    dispatch_async(dispatch_get_main_queue(), ^(void){
            [weakSelf.roadConditionsArray removeAllObjects];
            [weakSelf.mapView removeAnnotations:self.roadConditionAnnotationsArray];
            [weakSelf.roadConditionAnnotationsArray removeAllObjects];
        });
    }

    //加载周边路况
    [self.requestDataOperation cancel];
    self.requestDataOperation =
    [FMHTTPClient getRoadConditionAround:coord completion:^(WebAPIResponse *response) {
        
        dispatch_async(dispatch_get_main_queue(), ^(void){
            
            if(response.code == WebAPIResponseCodeSuccess){
                NSArray* dataList = [response.responseObject objectForKey:kDataKeyData];
                if ([dataList isKindOfClass:[NSArray class]]) {
                    for (NSDictionary *dic in dataList)
                    {
                        RoadConditionInfo* roadConditionInfo = [RoadConditionInfo roadConditionWithUnserializedJSONDic:dic];
                        if (roadConditionInfo) {
                            [weakSelf.roadConditionsArray addObject:roadConditionInfo];
                            //将标注添加到标注数值组
                            CustomMKAnnotation *customAnnotation = [[CustomMKAnnotation alloc] init];
                            customAnnotation.coordinate = roadConditionInfo.roadConditionCoordinate;
                            customAnnotation.data = roadConditionInfo;
                            customAnnotation.type = roadConditionInfo.roadConditionType;
                            [weakSelf.roadConditionAnnotationsArray addObject:customAnnotation];
                            
                        }
                    }
                }
                [weakSelf.mapView addAnnotations:weakSelf.roadConditionAnnotationsArray];
            }else{
                ShowAutoHideMBProgressHUD(weakSelf.view,NETERROR_LOADERR_TIP);
            }
        });
    }];
 
}
#pragma mark -地图长按手势
- (void)longPressGestureRecognizer:(UIGestureRecognizer*)gestureRecognizer
{
    if (gestureRecognizer.state == UIGestureRecognizerStateEnded) {
        return;
    }else if (gestureRecognizer.state == UIGestureRecognizerStateBegan) {
        MKMapView *mainMapView = self.mapView;
        CGPoint touchPoint = [gestureRecognizer locationInView:mainMapView];//这里touchPoint是点击的某点在地图控件中的地位
        CLLocationCoordinate2D touchMapCoordinate = [mainMapView convertPoint:touchPoint toCoordinateFromView:self.mapView];//这里touchMapCoordinate就是该点的经纬度了
        
        if( [mainMapView.annotations containsObject:self.longPressAnnotation]){
            [mainMapView removeAnnotation:self.longPressAnnotation];
        }
        self.longPressAnnotation = [[CustomMKAnnotation alloc] init];
        self.longPressAnnotation.title = @"目标中心";
        self.longPressAnnotation.subtitle = @"可查看该点周边8公里路况";
        self.longPressAnnotation.type = FMLongPressAnnotation;
        self.longPressAnnotation.coordinate = touchMapCoordinate;
        [mainMapView addAnnotation:self.longPressAnnotation];
//        [self getRoadConditions:touchMapCoordinate];
    }
    return;
}

#pragma mark -地图单击时
- (void) mapViewTapped:(UITapGestureRecognizer *) recognizer
{
    [self hideRoadConditionDetail];
}

#pragma mark -隐藏路况详情
-(void)hideRoadConditionDetail
{
    
    RoadConditionInfo *roadConditionInfo = nil;
    //取消选中标签
    if (self.selectAnnotationView) {
        CustomMKAnnotation *customMKAnnotation = (CustomMKAnnotation *)self.selectAnnotationView.annotation;
        roadConditionInfo = (RoadConditionInfo* )customMKAnnotation.data;
        [self updateMapMark:self.selectAnnotationView isHighlight:NO];
        self.selectAnnotationView = nil;
        
    }
    
    //隐藏路况详情
    if (self.mapInfoBar && self.mapInfoBar.hidden == NO) {
        CGRect rc = self.navigationController.view.bounds;
        [UIView animateWithDuration:0.3f animations:^{
            [self.mapInfoBar setFrame:CGRectMake(0, rc.size.height,
                                                 rc.size.width,
                                                 kRoadConditionDetailHeight)];
        } completion:^(BOOL finished) {
            if (finished) {
                [self.mapInfoBar removeFromSuperview];
                self.mapInfoBar = nil;
            }
        }];
    }
    
    if (roadConditionInfo != nil) {
        if ([roadConditionInfo.reportUserInfo.userRole isEqualToString:@"0"]) {
//            NSDictionary *personDic = [[NSDictionary alloc] initWithObjectsAndKeys:roadConditionInfo.reportUserInfo.userID,@"id",roadConditionInfo.reportUserInfo.userName,@"name",nil];
//            PublishQuestionViewController *publishViewControll = [[PublishQuestionViewController alloc]initWithPersonDictionary:personDic];
//            FMNavigationController *navController = [[FMNavigationController alloc] initWithRootViewController:publishViewControll];
//            [self presentModalViewController:navController animated:YES];
        }
    }
}

#pragma mark -更新地图标签
-(void)updateMapMark:(MKAnnotationView* )annotationView isHighlight:(BOOL)bHighlight
{
    CustomMKAnnotation *annotation = (CustomMKAnnotation *)annotationView.annotation;
    
    NSString *annotationImageName = nil;
    switch (annotation.type) {
        case FMJamAnnotation:
            annotationImageName = bHighlight ? @"RoadCondition_JamAnnotation_Highlight.png":
                                               @"RoadCondition_JamAnnotation_Normal.png";
            break;
        case FMSlowAnnotation:
            annotationImageName = bHighlight ? @"RoadCondition_SlowAnnotation_Highlight.png":
                                               @"RoadCondition_SlowAnnotation_Normal.png";
            break;
        case FMPassImpededAnnotation:
            annotationImageName = bHighlight ? @"RoadCondition_PassImpededAnnotation_Highlight.png":
                                               @"RoadCondition_PassImpededAnnotation_Normal.png";
            break;
        case FMExposureAnnotation:
            annotationImageName = bHighlight ? @"RoadCondition_ExposureAnnotation_Normal.png":
                                               @"RoadCondition_ExposureAnnotation_Normal.png";
            break;
        default:
            break;
    }
    
    annotationView.image = [UIImage imageNamed:annotationImageName];
}

#pragma mark -
#pragma mark -手势Delegate
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch
{
    //点击的不是地图标签，交由mapViewTapped处理
    if (![touch.view isKindOfClass:[MKAnnotationView class]]) {
        return YES;
    }
    MKAnnotationView *annotationView = (MKAnnotationView *)touch.view;
    if (![annotationView.annotation isKindOfClass:[CustomMKAnnotation class]]) {
        return YES;
    }
    CustomMKAnnotation *customMKAnnotation = (CustomMKAnnotation *)annotationView.annotation;
    if (customMKAnnotation.type == FMLongPressAnnotation) {
        return YES;
    }
    //更改选中标签颜色
    if (self.selectAnnotationView) {
        [self updateMapMark:self.selectAnnotationView isHighlight:NO];
    }
    self.selectAnnotationView = annotationView;
    [self updateMapMark:annotationView isHighlight:YES];

    
    //更新路况详情
    CGRect rc = self.navigationController.tabBarController.view.bounds;
    if (self.mapInfoBar == nil) {
        FMMapInfoBar *mapInfoBar = [[FMMapInfoBar alloc]initWithFrame:CGRectMake(0,
                                                                                 rc.size.height,
                                                                                 rc.size.width,
                                                                                 kRoadConditionDetailHeight)];
        //添加手势
        UITapGestureRecognizer *tapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self
                                                                                        action:@selector(roadConditionDetailListViewTapped:)];
        [mapInfoBar addGestureRecognizer:tapRecognizer];
        [self.navigationController.tabBarController.view addSubview:mapInfoBar];
        mapInfoBar.hidden = YES;
        self.mapInfoBar = mapInfoBar;
    }
    RoadConditionInfo *roadConditionInfo = (RoadConditionInfo* )customMKAnnotation.data;
    [self.mapInfoBar displayRoadCondition:roadConditionInfo];
    
    //动画显示roadConditionDetailListView
    if (self.mapInfoBar.isHidden) {//未显示路况信息视图
        self.mapInfoBar.hidden = NO;
        self.mapInfoBar.layer.shadowOpacity = 0.6f;//设置透明度
        
        CATransition *transition = [CATransition animation];
        transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
        transition.duration = 0.3f;
        [transition setType:kCATransitionPush];
        [transition setSubtype: kCATransitionFromTop];
        [self.mapInfoBar.layer addAnimation:transition forKey:@"Animation_Push"];
        [self.mapInfoBar setFrame:CGRectMake(0,
                                             rc.size.height - kRoadConditionDetailHeight,
                                             rc.size.width,
                                             kRoadConditionDetailHeight)];
    }
    
    return NO;
}

#pragma mark -
#pragma mark -MKMapViewDelegate
- (MKAnnotationView *) mapView:(MKMapView *)mapView viewForAnnotation:(id<MKAnnotation>)annotation
{
    MKAnnotationView *annotationView = nil;
    
    if ([annotation isKindOfClass:[CustomMKAnnotation class]]) {
        annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:@"FMAnnotationView"];
        
        if (!annotationView) {
            annotationView = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"FMAnnotationView"];
        }
        
        CustomMKAnnotation *mkAnnotation = (CustomMKAnnotation *)annotation;
        
        NSString *annotationImageName = nil;
        switch (mkAnnotation.type) {
            case FMJamAnnotation:
                annotationImageName = @"RoadCondition_JamAnnotation_Normal.png";
                break;
            case FMSlowAnnotation:
                annotationImageName = @"RoadCondition_SlowAnnotation_Normal.png";
                break;
            case FMPassImpededAnnotation:
                annotationImageName = @"RoadCondition_PassImpededAnnotation_Normal.png";
                break;
            case FMExposureAnnotation:
                annotationImageName = @"RoadCondition_ExposureAnnotation_Normal.png";
                break;
            case FMLongPressAnnotation:{
                MKPinAnnotationView *pinAnnotationView = (MKPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:@"LongPressAnnotation"];
                
                if (!pinAnnotationView) {
                    pinAnnotationView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"LongPressAnnotation"];
                    pinAnnotationView.animatesDrop = YES;
                    pinAnnotationView.canShowCallout = YES;
                }
                
                return  pinAnnotationView;
            }
                break;
            default:
                break;
        }
        annotationView.image = [UIImage imageNamed:annotationImageName];
    }
    
    return annotationView;
}

#pragma mark -路况上报
- (void)publishRoadCondition
{
    /*
    AddRoadConditionViewController *addViewController = [[AddRoadConditionViewController alloc] init];
    FMNavigationController *navigationView = [[FMNavigationController alloc]initWithRootViewController:addViewController];
    [self presentModalViewController:navigationView animated:YES];
    //addViewController.hidesBottomBarWhenPushed = YES;
    //[self.navigationController pushViewController:addViewController animated:YES];
     */
    
    AddRoadConditionContentController *viewController = [[AddRoadConditionContentController alloc]init];
    FMNavigationController *navigationView = [[FMNavigationController alloc]initWithRootViewController:viewController];
    [self presentModalViewController:navigationView animated:YES];
    
}

#pragma mark -
#pragma mark - 根据用户滑动获取选择后的经纬度
- (void)mapView:(MKMapView *)mapView regionDidChangeAnimated:(BOOL)animated{
    
    
    CGRect rc = self.view.frame;
    CGPoint touchPoint = CGPointMake(rc.size.width/2.0f,(rc.size.height - 78.0f)/2);
    CLLocationCoordinate2D touchMapCoordinate = [self.mapView convertPoint:touchPoint toCoordinateFromView:self.mapView];
    ///若定位失败
    if (touchMapCoordinate.longitude == 0 &&touchMapCoordinate.latitude == 0) {//如果经纬度为0
        return;
    }
    //若级别过低
    if (mapView.region.span.latitudeDelta >= 0.09||mapView.region.span.longitudeDelta >= 0.07) {
        
        if (self.isMapPolymerizationLimit == NO) {
           // ShowAutoHideMBProgressHUD(kKeyWindow, @"地图视野过大，无法加载路况");
            self.isMapPolymerizationLimit = YES;
        }
        return;
    }
    CGPoint startPoint = CGPointMake(0.0f, 0.0f);
    CLLocationCoordinate2D startMapCoordinate = [self.mapView convertPoint:startPoint
                                                      toCoordinateFromView:self.mapView];
    CLLocationCoordinate2D finishMapCoodinate = [self.mapView convertPoint:CGPointMake(rc.size.width, rc.size.height)
                                                      toCoordinateFromView:self.mapView];
    self.isMapPolymerizationLimit = NO;
    
    if (self.leftLocationCoordinate.latitude >= startMapCoordinate.latitude         //上边界必须外层的较大
        &&  self.rightLocationCoordinate.latitude <= finishMapCoodinate.latitude    //下边界必须里层的较大
        && self.leftLocationCoordinate.longitude <= startMapCoordinate.longitude    //左边界必须外层的较大
        && self.rightLocationCoordinate.longitude >= finishMapCoodinate.longitude   //右边界必须外层的较大
        ) {
        return;
    }
    self.leftLocationCoordinate = startMapCoordinate;
    self.rightLocationCoordinate = finishMapCoodinate;
    
    ///获取非语音路况数据内容
    [self initWithRoadConditionsInforForLeftCoordinate:startMapCoordinate
                                   withRightCoordinate:finishMapCoodinate];
}

//TODO:3.获取语音路况内容方式；
- (void)getRoadConditionWithAudio:(CLLocationCoordinate2D )coordinate{
    __weak __typeof(&*self)weakSelf = self;
    //移除现有路况信息
    if ([self.roadConditionsForAudioArray count] > 0) {
        dispatch_async(dispatch_get_main_queue(), ^(void){
            [weakSelf.roadConditionsForAudioArray removeAllObjects];
            [weakSelf.mapView removeAnnotations:self.roadConditionAnnotationsForAudioArray];
            [weakSelf.roadConditionAnnotationsForAudioArray removeAllObjects];
            weakSelf.audioARMStringForBDSpeechString = nil;
            weakSelf.audioARMStringForBDSpeechString = [[NSString alloc]initWithFormat:@"%@",@""];
        });
    }
    //加载周边路况
    [self.requestOperationForAudio cancel];
    self.requestOperationForAudio =
    [FMHTTPClient getRoadConditionForAudioInforLocationCoordinate:coordinate
                                                       completion:^(WebAPIResponse *response) {
                                                           
                                                           dispatch_async(dispatch_get_main_queue(), ^(void){
                                                               
                                                               if(response.code == WebAPIResponseCodeSuccess){
                                                                   NSArray* dataList = [response.responseObject objectForKey:kDataKeyData];
                                                                   
                                                                   if ([dataList isKindOfClass:[NSArray class]]) {
                                                                       for (NSDictionary *dic in dataList)
                                                                       {
                                                                           Log(@"=============\n %@",dic)
                                                                           RoadConditionInfo* roadConditionInfo = [RoadConditionInfo roadConditionWithUnserializedJSONDic:dic];
                                                                           if (roadConditionInfo) {
                                                                               [weakSelf.roadConditionsForAudioArray addObject:roadConditionInfo];
                                                                               
                                                                           }
                                                                       }
                                                                   }
                                                               }else{
                                                                   ShowAutoHideMBProgressHUD(weakSelf.view,NETERROR_LOADERR_TIP);
                                                               }
                                                               
                                                               if (self.isAlreadyStartPlayRoadContent == YES) {
                                                                   Log(@"self.roadConditionsForAudioArray count is %d",[self.roadConditionsForAudioArray count]);
                                                                   [self initWithStartAudioVoiceRoadConditionsWithFirstBegin:YES];
                                                               }
                                                           });
                                                       }];
}


- (void)initWithRoadConditionsInforForLeftCoordinate:(CLLocationCoordinate2D)leftCoor withRightCoordinate:(CLLocationCoordinate2D)rightCoor{
    __weak __typeof(&*self)weakSelf = self;
    //加载周边路况
    [self.requestDataOperation cancel];
    self.requestDataOperation = [FMHTTPClient getRoadConditionInforForDoubleLocationCoordinateWithLeftLocationCoordinate:leftCoor withRightLocationCoordinate:rightCoor withcompletion:^(WebAPIResponse *response) {
        dispatch_async(dispatch_get_main_queue(), ^(void){
            
            
            if(response.code == WebAPIResponseCodeSuccess){
                NSArray* dataList = [response.responseObject objectForKey:kDataKeyData];
                if ([dataList isKindOfClass:[NSArray class]]) {
                    for (NSDictionary *dic in dataList)
                    {
                        RoadConditionInfo* roadConditionInfo = [RoadConditionInfo roadConditionWithUnserializedJSONDic:dic];
                        if (roadConditionInfo) {
                            
                            ///若不存在，则将其加入到路况里面
                            if (![self.roadConditionsDictionary objectForKey:roadConditionInfo.roadConditionID]) {
                                ///加入到数组中
                                [weakSelf.roadConditionsArray addObject:roadConditionInfo];
                                //加入到字典中
                                AddObjectForKeyIntoDictionary(roadConditionInfo, roadConditionInfo.roadConditionID, self.roadConditionsDictionary);
                                //将标注添加到标注数值组
                                CustomMKAnnotation *customAnnotation = [[CustomMKAnnotation alloc] init];
                                customAnnotation.coordinate = roadConditionInfo.roadConditionCoordinate;
                                customAnnotation.data = roadConditionInfo;
                                customAnnotation.type = roadConditionInfo.roadConditionType;
                                [weakSelf.roadConditionAnnotationsArray addObject:customAnnotation];
                            }
                        }
                    }
                }
                [weakSelf.mapView addAnnotations:weakSelf.roadConditionAnnotationsArray];
                
            }else{
            }
        });
        
    }];

}



#pragma mark - BDSSpeechSynthesizer Delegate

- (void)synthesizerStartWorking:(BDSSpeechSynthesizer *)speechSynthesizer
{
}

- (void)synthesizerSpeechStart:(BDSSpeechSynthesizer *)speechSynthesizer
{
}

- (void)synthesizerSpeechDidResumed:(BDSSpeechSynthesizer *)speechSynthesizer
{
    //    if (isStarted) {
    //        [self changePlayButtonBasedOnStateIsPaused:NO];
    //    }
}

- (void)synthesizerSpeechProgressChanged:(BDSSpeechSynthesizer *)speechSynthesizer progress:(float)progress
{
}

- (void)synthesizerSpeechDidPaused:(BDSSpeechSynthesizer *)speechSynthesizer
{
    //    [self changePlayButtonBasedOnStateIsPaused:YES];
}

- (void)synthesizerSpeechDidFinished:(BDSSpeechSynthesizer *)speechSynthesizer
{
    
    Log(@"本次内容播放结束了，将进入下次播放列表");
    if (self.isAlreadyStartPlayRoadContent == YES) {
        Log(@"self.roadConditionsForAudioArray count is %d",[self.roadConditionsForAudioArray count]);
        [self initWithStartAudioVoiceRoadConditionsWithFirstBegin:NO];
    }
}

- (void)synthesizerNewDataArrived:(BDSSpeechSynthesizer *)speechSynthesizer data:(NSData *)newData
{
    [self logDebug:[NSString stringWithFormat:@"新的音频数据：%ld", (long)[newData length]]];
}

- (void)synthesizerDidCanceled:(BDSSpeechSynthesizer *)speechSynthesizer
{
    [self logDebug:@"已取消"];
}

- (void)synthesizerErrorOccurred:(BDSSpeechSynthesizer *)speechSynthesizer error:(NSError *)error
{
    
    if (error.code == BDS_SYNTHESIZER_INIT_PARAM_ERROR) {
    }
}

#pragma mark - 百度播放试试
- (void)initWithStartBDSpeekWithString:(NSString *)speekString{
    __weak __typeof(&*self)weakSelf = self;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        weakSelf.synthesizer = [[BDSSpeechSynthesizer alloc] initSynthesizer:@"holder" delegate:self];
        [weakSelf initWithSetBDSpeekParamInformation];
        int ret =  [self.synthesizer speak:speekString];
        
        if (ret != 0) {
        }
    });
}

- (void)initWithSetBDSpeekParamInformation{
    // 此处需要将setApiKey:withSecretKey:方法的两个参数替换为你在百度开发者中心注册应用所得到的apiKey和secretKey
    [self.synthesizer setApiKey:BAIDU_VOICE_API_KEY withSecretKey:BAIDU_VOICE_SECRET_KEY];
    [self.synthesizer setParamForKey:BDS_PARAM_TEXT_ENCODE value:BDS_TEXT_ENCODE_UTF8];
    [self.synthesizer setParamForKey:BDS_PARAM_SPEAKER value:BDS_SPEAKER_FEMALE];
    [self.synthesizer setParamForKey:BDS_PARAM_VOLUME value:@"5"];
    [self.synthesizer setParamForKey:BDS_PARAM_SPEED value:@"5"];
    [self.synthesizer setParamForKey:BDS_PARAM_PITCH value:@"5"];
    [self.synthesizer setParamForKey:BDS_PARAM_AUDIO_RATE value:BDS_AUDIO_BITRATE_AMR_15K85];
}

#pragma mark - Error code convert

- (NSString *)convertErrorCodeToDescription:(NSInteger) errorCode
{
    NSString *errorDescription = [self.synthesizer errorDescriptionForCode:errorCode];
    return [NSString stringWithFormat:@"%@(%ld)", errorDescription, (long)errorCode];
}

#pragma mark - Log to Console View

- (void)logDebug:(NSString *)logMessage
{
    Log(@" logMessage is %@",logMessage)
}

- (void)initWithStartVoiceForRoadConditions:(id)sender{
    UIButton   *button = (UIButton *)sender;
    
    if (button.tag == KButtonStartVoiceRoadTag) {
        [button setTag:KButtonFinishVoiceRoadTag];
        ///获取语音路况数据内容
        
        [self.audioRoadConditionAnimationImageView startAnimating];
        self.isAlreadyStartPlayRoadContent = YES;
        [self getRoadConditionWithAudio:[CurrentUserInformation sharedCurrentUserInfo].userCoordinate];
        [button setBackgroundImage:[UIImage imageNamed:@"RoadAudioVoiceBackGroundImage.png"] forState:UIControlStateNormal];
    }
    
    else if (button.tag == KButtonFinishVoiceRoadTag){
        [button setTag:KButtonStartVoiceRoadTag];
        [self.audioRoadConditionAnimationImageView stopAnimating];
        [button setBackgroundImage:[UIImage imageNamed:@"RoadAudioVoiceBackGroundImage.png"] forState:UIControlStateNormal];
        self.isAlreadyStartPlayRoadContent = NO;
        [self.synthesizer cancel];
        [self.userAudioManager stopPlay];
    }
}


///进行逻辑判断设置
- (void)initWithStartAudioVoiceRoadConditionsWithFirstBegin:(BOOL)isFirstBigin{
    
    ///语音路况中若存在数据，则进行分析设置，否则将无法进行播放
    if ([self.roadConditionsForAudioArray count] >0) {
        ///若是第一次进入则直接从头播放
        RoadConditionInfo* roadConditionInfo = (RoadConditionInfo *)[self.roadConditionsForAudioArray objectAtIndex:0];
        
        ///将该内容，从已知信息队列中移除
        [self.roadConditionsForAudioArray removeObject:roadConditionInfo];
        ///若用户上报的路况语音长度小于1秒，则视为没有该语音路况，将播放百度合成语音
        if (roadConditionInfo.amrLength < 1) {
            NSString *roadConditionContent = [NSString stringWithFormat:@"%@",roadConditionInfo.roadConditionContent];
            
            Log(@"roadConditionContent is %@",roadConditionContent);
            ///若有内容，则进行本次内容播放
            if (!IsStringEmptyOrNull(roadConditionContent)) {
                
//                NSString *uploadUserName = [NSString stringWithFormat:@"\t上报者 %@",roadConditionInfo.reportUserInfo.userName];
//                roadConditionContent = [NSString stringWithFormat:@"%@ %@ ",roadConditionContent,roadConditionInfo.reportUserInfo.userRole != 0 ? @"":uploadUserName];
                [self initWithStartBDSpeekWithString:roadConditionContent];
            }
            ///进入下个播放循环
            else{
                if (self.isAlreadyStartPlayRoadContent == YES) {
                    [self initWithStartAudioVoiceRoadConditionsWithFirstBegin:NO];
                }
            }
        }
        
        ///将进行用户路况语音内容播放
        else{
            NSString *roadConditionAudioKey = [NSString stringWithFormat:@"%@",roadConditionInfo.roadContentWithAudio];
            ///若不为空，则进行语音播放
            if (!IsStringEmptyOrNull(roadConditionAudioKey)) {
                
                Log(@"roadConditionAudioKey is %@",roadConditionAudioKey)
                if (self.userAudioManager) {
                    [self.userAudioManager setDelegate:nil];
                    self.userAudioManager = nil;
                }
                self.userAudioManager = [[FMAudioManager alloc]init];
                [self.userAudioManager setDelegate:self];
                [self.userAudioManager playURL:roadConditionAudioKey];
            }
            ///若为空，则进行下一个下一个循环
            else{
                if (self.isAlreadyStartPlayRoadContent == YES) {
                    [self initWithStartAudioVoiceRoadConditionsWithFirstBegin:NO];
                }
            }
        }
    }
    else{
        [self.userStartPlayRoadContentButton setTag:KButtonFinishVoiceRoadTag];
        [self initWithStartVoiceForRoadConditions:self.userStartPlayRoadContentButton];
    }
}
- (void)initWithUserStarRecordAudio{
    
    [self.userCancelAudioImageView setImage: [UIImage imageNamed: @"RoadCondition_CancalRecordAudio.png"]];
    [self.userCancelAudioImageView setHidden:YES];
    [self.userRecordAudioAnimationImageView setHidden:NO];
    [self.userRecordAudioAnimationImageView startAnimating];
    
    self.isAudioPlaying = YES;
    [self.recordAudioBGView setHidden:NO];
    
    if (self.userAudioManager) {
        [self.userAudioManager setDelegate:nil];
        self.userAudioManager = nil;
    }
    self.userAudioManager = [[FMAudioManager alloc]init];
    [self.userAudioManager setDelegate:self];
    [self.userAudioManager startRecord];
}

- (void)initWithUserCancelRecordAudio{
    [self.userCancelAudioImageView setImage:[UIImage imageNamed: @"RoadCondition_EnsureCancalRecordAudio.png"]];
    [self.userRecordAudioAnimationImageView stopAnimating];
    [self.userRecordAudioAnimationImageView setHidden:YES];
    [self.userCancelAudioImageView setHidden:NO];
    
}

- (void)initWithUserRemoveCancelRecordAudio{
    [self.recordAudioBGView setHidden:YES];
    [self.userRecordAudioAnimationImageView stopAnimating];
    if (self.isAudioPlaying == YES) {
        self.userRecordAMRInfor = [self.userAudioManager stopRecord];
        self.isAudioPlaying = NO;
    }
}

- (void)initWithUserFinishRecordAudio{
    self.isAudioPlaying = NO;
    [self.userRecordAudioAnimationImageView stopAnimating];
    self.userRecordAMRInfor = [self.userAudioManager stopRecord];
    [self.recordAudioBGView setHidden:YES];
    
    
    if (self.userRecordAMRInfor.amrLength <= 1) {
        
        ShowAutoHideMBProgressHUD(HUIKeyWindow,@"语音时间太短");
        return;
    }
    if (self.isAlreadyStartPlayRoadContent == YES) {
        ShowImportErrorAlertView(@"请先关闭语音播报");
        return;
    }
    //上报到服务器
    //    [self initWithAddRoadWithAudio];
    [self initWithUploadAudioForRoadInfor];
}


- (void)initWithUploadAudioForRoadInfor{
    WaittingMBProgressHUD(HUIKeyWindow, @"上传中...");
    __weak __typeof(&*self)weakSelf = self;
    [[HTTPClient sharedImageClient] audioUpload:self.userRecordAMRInfor.amrData
                                     completion:^(WebAPIResponse *response) {
                                         dispatch_async(dispatch_get_main_queue(), ^(void){
                                             if(response.code == WebAPIResponseCodeSuccess){
                                                 FinishMBProgressHUD(HUIKeyWindow);
                                                 NSString *audioKeyString = StringForKeyInUnserializedJSONDic(response.responseObject, kDataKeyData);
                                                 
                                                 if (!IsStringEmptyOrNull(audioKeyString)) {
                                                     
                                                     
                                                     [weakSelf.userAudioDictionary setObject:audioKeyString forKey:@"voiceKey"];
                                                     [weakSelf.userAudioDictionary setObject:[NSString stringWithFormat:@"%d",self.userRecordAMRInfor.amrLength] forKey:@"voiceLen"];
                                                     [weakSelf initWithAddRoadWithAudio];
                                                     
                                                 }
                                             }
                                             else {
                                                 FailedMBProgressHUD(HUIKeyWindow, @"上传失败");
                                             }
                                         });
                                     }];
}

- (void)audioPlayStatus:(NSInteger)status{
    __weak __typeof(&*self)weakSelf = self;
    if (status !=0 ) {
        dispatch_async(dispatch_get_main_queue(), ^{
            weakSelf.isAudioPlaying = NO;
            if (self.isAlreadyStartPlayRoadContent == YES) {
                [self initWithStartAudioVoiceRoadConditionsWithFirstBegin:NO];
            }
        });
    }
}

- (void)initWithAddRoadWithAudio{
    
    NSString    *userAudioParam = [[NSString alloc]initWithFormat:@"%@",[self.userAudioDictionary JSONString]];
    NSString* contentText = @"";
    RoadConditionInfo *roadConditionInfo = [[RoadConditionInfo alloc] init];
    
    if([[CurrentUserInformation sharedCurrentUserInfo] userLoginState] == 0){//用户未登录 则userId为0 匿名用户
        roadConditionInfo.reportUserInfo.userID = @"0";
        roadConditionInfo.reportUserInfo.userName = @"匿名车友";
        roadConditionInfo.reportUserInfo.userSex = 1;
    }else{//用户已登录
        roadConditionInfo.reportUserInfo.userID = [CurrentUserInformation sharedCurrentUserInfo].userID;
        roadConditionInfo.reportUserInfo.userName = [[CurrentUserInformation sharedCurrentUserInfo] userName];
        roadConditionInfo.reportUserInfo.userSex = [[CurrentUserInformation sharedCurrentUserInfo] userSex];
        roadConditionInfo.reportUserInfo.userAvatar = [[CurrentUserInformation sharedCurrentUserInfo] userAvatar];
        roadConditionInfo.reportUserInfo.userCityName = [CurrentUserInformation sharedCurrentUserInfo].userCityCode;
        if (FMShareSetting.agreePublicLocation) {
            roadConditionInfo.reportUserInfo.userStreet = [[NSUserDefaults standardUserDefaults] valueForKey:@"FMUserLocationInfo"];
        }
    }
    roadConditionInfo.reportTime = @"刚刚";
    roadConditionInfo.roadConditionContent = contentText;
    roadConditionInfo.roadConditionCoordinate = [CurrentUserInformation sharedCurrentUserInfo].userCoordinate;
    roadConditionInfo.roadConditionType = 1;
    roadConditionInfo.roadContentWithAudio = userAudioParam;
    
    //发布请求
    __weak __typeof(&*self)weakSelf = self;
    [FMHTTPClient publishRoadCondition:roadConditionInfo
                             shareType:0
                            completion:^(WebAPIResponse* response){
                                Log(@"%@",response.responseObject);
                                dispatch_async(dispatch_get_main_queue(), ^(void){
                                    if (response.code == WebAPIResponseCodeSuccess) {
                                        
                                        
                                        SuccessMBProgressHUD(HUIKeyWindow,@"发布成功");
                                        
                                        [weakSelf dismissModalViewControllerAnimated:YES];
                                    }else{
                                        FailedMBProgressHUD(HUIKeyWindow,@"发布失败");
                                    }
                                });
                            }];
}

//夜间模式
-(void)createView
{
    
    _backLayer.frame= self.view.bounds;//设置layer的区域
    
    [self.view.layer addSublayer:_backLayer];
    
    if(ThemeCategory==5)
    {
        _backLayer.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:0.3].CGColor;
    }
    else
    {
        _backLayer.backgroundColor = [UIColor colorWithRed:1 green:1 blue:1 alpha:0].CGColor;
    }
}

@end
